<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack的使用</title>
      <link href="/2023/04/03/webpack-de-shi-yong/"/>
      <url>/2023/04/03/webpack-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>npm install webpack webpack -cli -g</p><p>npm install webpack webpack -cli -d</p><h3 id="创建package-json"><a href="#创建package-json" class="headerlink" title="创建package.json"></a>创建package.json</h3><p>npm init </p><h3 id="使用局部webpack"><a href="#使用局部webpack" class="headerlink" title="使用局部webpack"></a>使用局部webpack</h3><p>解决项目版本冲突问题</p><p>.&#x2F;node-modules&#x2F;.bin&#x2F;webpack</p><p>npx  webpack</p><p>在package.json 添加</p><p>“script”: {</p><p>​“build”: “webpack”</p><p>}</p><p>npm run build</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>浏览器不认识CommonJS、require</p><p>打包完导入index.js</p><h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>官网-&gt;api -&gt;命令行接口</p><p>src下子文件修改名字导致不能打包</p><p>npx webpack –entry .&#x2F;src&#x2F;main.js –output-path .&#x2F;build  </p><p>直接在package.json下配置</p><p>“build”: “webpack –entry .&#x2F;src&#x2F;main.js –output-path .&#x2F;build”</p><h3 id="独立文件配置webpack"><a href="#独立文件配置webpack" class="headerlink" title="独立文件配置webpack"></a>独立文件配置webpack</h3><p>文件名 webpack.config.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#x27;./src/main.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;bunder.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &quot;./build&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动指定对应配置文件</p><p>webpack –config wk.config.js</p><p>关系依赖图</p><p>打包后的文件运行无结果可能是没有产生依赖</p><h3 id="css解析"><a href="#css解析" class="headerlink" title="css解析"></a>css解析</h3><h4 id="内联方式"><a href="#内联方式" class="headerlink" title="内联方式"></a>内联方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Styles</span> <span class="keyword">from</span> <span class="string">&#x27;style-loader!css-loader?modules!./styles.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用 <code>!</code> 前缀，将禁用所有已配置的 normal loader(普通 loader)</p><p>使用 <code>!!</code> 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）</p><p>使用 <code>-!</code> 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders</p><h4 id="cli方式（废弃"><a href="#cli方式（废弃" class="headerlink" title="cli方式（废弃"></a>cli方式（废弃</h4><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="Browserslist（浏览器适配）"><a href="#Browserslist（浏览器适配）" class="headerlink" title="Browserslist（浏览器适配）"></a>Browserslist（浏览器适配）</h3><p>![image-20220620223151360](H:\typora img\image-20220620223151360.png)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1%</span><br><span class="line">last 2 versions</span><br><span class="line">not dead</span><br></pre></td></tr></table></figure><p>在webpack.config.json配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;: [</span><br><span class="line">&quot;&gt; 1%&quot;,</span><br><span class="line">&quot;last 2 versions&quot;,</span><br><span class="line">&quot;not dead&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>创建文件.browserslistrc</p><p>npx browerslist 验证当前支持哪个浏览器</p><h3 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h3><p>通过js来转换样式，进行css的适配</p><p>工具本身独立，依赖插件进行</p><p>安装</p><p>npm install postcss -D</p><p>npm install postcss-cli -D 使能在命令行进行</p><p>autoprefixer.github.io 测试适配浏览器网站</p><p>给样式添加前缀插件</p><p>npm install autoprefixer -D</p><p>npx postcss -use autoprefixer(插件名称) -o xx.css .&#x2F;src&#x2F;css&#x2F;test.css</p><p>npm install postcss-loader -D 在webpack使用postcss</p><p>在webpack使用postcss，配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">loader: &#123;</span><br><span class="line"></span><br><span class="line">loader: “postcss-loader&quot;,</span><br><span class="line"></span><br><span class="line">options: [</span><br><span class="line"></span><br><span class="line">postcssOptions: &#123;</span><br><span class="line"></span><br><span class="line">plugins:  [</span><br><span class="line"></span><br><span class="line">require(&quot;autoprefixer&quot;)</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="postcss-preset-env-对十六进制的颜色进行rgba转换"><a href="#postcss-preset-env-对十六进制的颜色进行rgba转换" class="headerlink" title="postcss-preset-env 对十六进制的颜色进行rgba转换"></a>postcss-preset-env 对十六进制的颜色进行rgba转换</h4><p>npm install postcss-preset-env -D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">loader: &#123;</span><br><span class="line"></span><br><span class="line">loader: “postcss-loader&quot;,</span><br><span class="line"></span><br><span class="line">options: [</span><br><span class="line"></span><br><span class="line">postcssOptions: &#123;</span><br><span class="line"></span><br><span class="line">plugins:  [</span><br><span class="line"></span><br><span class="line">require(&quot;postcss-preset-env&quot;)</span><br><span class="line"></span><br><span class="line">//简写</span><br><span class="line"></span><br><span class="line">&quot;postcss-preset-env&quot;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>postcss-preset-env包含autoprefixer</p><h4 id="对postcss单独抽离配置-postcss-config-js"><a href="#对postcss单独抽离配置-postcss-config-js" class="headerlink" title="对postcss单独抽离配置 postcss.config.js"></a>对postcss单独抽离配置 postcss.config.js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">plugins: [</span><br><span class="line">require(&#x27;postcss-preset-env&#x27;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在wk.config.js引用</p><p>使用import引入css文件需要添加importlLoaders处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: /\.less$/,</span><br><span class="line">use: [</span><br><span class="line">&quot;style-loader&quot;,</span><br><span class="line">&#123;</span><br><span class="line">loader: &quot;css-loader&quot;,</span><br><span class="line">options: &#123;</span><br><span class="line">importLoaders: 2(后面有几个loader就写几)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;postcss-loader&quot;,</span><br><span class="line">&quot;less-loader&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>加载和处理其他资源。loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的得力方式。</p><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>加载用import和require请求的资源</p><p>文件的名称规则</p><p>[ext] 扩展名</p><p>[name] 名字</p><p>[contentHash]</p><p>[hash:<length>]</p><p>[path]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: /\.(png | jpe?g | gif | svg)$/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &quot;file-loader&quot;,</span><br><span class="line">options: &#123;</span><br><span class="line">name: &quot;[name].[hash:6].[ext]&quot;,</span><br><span class="line">outputPath: &quot;img&quot;//输出路径，少见</span><br><span class="line">name: &quot;img/[name].[hash:6].[ext]&quot;//一般写法</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p>把文件转成base64 data直接解析</p><p>大文件单独文件夹，单独http请求</p><p>小文件嵌入js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: /\.(png | jpe?g | gif | svg)$/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &quot;url-loader&quot;,</span><br><span class="line">options: &#123;</span><br><span class="line">name: &quot;[name].[hash:6].[ext]&quot;,</span><br><span class="line">limit: 100 * 1024(设置大小)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tips：webpack5之后处理其他资源"><a href="#tips：webpack5之后处理其他资源" class="headerlink" title="tips：webpack5之后处理其他资源"></a>tips：webpack5之后处理其他资源</h3><h5 id="asset-x2F-resource-file-loader"><a href="#asset-x2F-resource-file-loader" class="headerlink" title="asset&#x2F;resource file-loader"></a>asset&#x2F;resource file-loader</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: /\.(png | jpe?g | gif | svg)$/,</span><br><span class="line">type: &quot;asset/resource&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样输出资源在根目录</p><p>在前面的output设置asserModuleFilename: “img&#x2F;[name].[hash:6]’[ext]”</p><p>或者添加generator: [</p><p>​filename: “[name].[hash:6]&#96;[ext]”</p><p>]</p><h5 id="asset-x2F-inline-url-loader"><a href="#asset-x2F-inline-url-loader" class="headerlink" title="asset&#x2F;inline url-loader"></a>asset&#x2F;inline url-loader</h5><p>base64编码</p><h5 id="asset-x2F-source-raw-loader"><a href="#asset-x2F-source-raw-loader" class="headerlink" title="asset&#x2F;source raw-loader"></a>asset&#x2F;source raw-loader</h5><p>导出资源</p><p>综合写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: /\.(png | jpe?g | gif | svg)$/,</span><br><span class="line">type: &quot;asset&quot;,</span><br><span class="line">generator: [</span><br><span class="line">filename: &quot;[name].[hash:6]`[ext]&quot;</span><br><span class="line">],</span><br><span class="line">parser: &#123;</span><br><span class="line">dataUrlCondition: &#123;</span><br><span class="line">maxSize: 100 * 1024</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="加载字体文件"><a href="#加载字体文件" class="headerlink" title="加载字体文件"></a>加载字体文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: /\.ttf | eot | woff2?$/i,</span><br><span class="line">type: &quot;asset/resource&quot;,</span><br><span class="line">generator: [</span><br><span class="line">filename: &quot;[name].[hash:6]`[ext]&quot;</span><br><span class="line">],</span><br><span class="line">parser: &#123;</span><br><span class="line">dataUrlCondition: &#123;</span><br><span class="line">maxSize: 100 * 1024</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p><strong>插件</strong> 是 webpack 的 <a href="https://github.com/webpack/tapable">支柱</a> 功能。</p><h3 id="自动删除打包文件"><a href="#自动删除打包文件" class="headerlink" title="自动删除打包文件"></a>自动删除打包文件</h3><p>npm install clean-webpack-plugin -D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在module.exports添加</span><br><span class="line">plugins: [</span><br><span class="line">new CleanWebpackPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="自动生成index-html"><a href="#自动生成index-html" class="headerlink" title="自动生成index.html"></a>自动生成index.html</h3><p>npm install html-webpack-plugin -D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在module.exports添加</span><br><span class="line">plugins: [</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">title: &quot;&quot;,</span><br><span class="line">template: &quot;&quot;(指定模板路径)</span><br><span class="line">&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="打包时创建全局常量（内置插件）"><a href="#打包时创建全局常量（内置插件）" class="headerlink" title="打包时创建全局常量（内置插件）"></a>打包时创建全局常量（内置插件）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const &#123;definePlugin&#125; = require(&#x27;webpack&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在module.exports添加</span><br><span class="line">plugins: [</span><br><span class="line">new DefinePlugin(&#123;</span><br><span class="line">BASE_URL: &#x27;&quot;./&quot;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>负责文件到打包</p><p>npm install copy-webpack-plugin -D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const CopyWebPlugin = require(&quot;copy-webpack-plugin&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在module.exports添加</span><br><span class="line">plugins: [</span><br><span class="line">new CopyWebPlugin(&#123;</span><br><span class="line">patterns:</span><br><span class="line">&#123;</span><br><span class="line">from: &#x27;public&#x27;,</span><br><span class="line">to: &#x27;&#x27;(可省略),</span><br><span class="line">globOptions: &#123;</span><br><span class="line">ignore: [</span><br><span class="line">&quot;**/index.html&quot;,</span><br><span class="line">&quot;**/.DS_Store&quot;(Mac电脑记录文件状态)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题整理-js</title>
      <link href="/2023/04/03/mian-shi-ti-zheng-li-js/"/>
      <url>/2023/04/03/mian-shi-ti-zheng-li-js/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="js-数据类型"><a href="#js-数据类型" class="headerlink" title="js 数据类型"></a>js 数据类型</h3><p>8 中, <code>ES6</code>出的 <code>Symbol BigInt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number String Boolean undefined null Object Symbol BigInt</span><br></pre></td></tr></table></figure><p>js 的基本数据类型和复杂数据类型的区别（在堆和栈中，赋值时的不同,一个拷贝值一个拷贝地址）</p><p><strong>基本类型和引用类型在内存上存储的区别</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89b70c934a0f436d90364287d706971a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><strong>null 与 undefined 的异同</strong></p><p><strong>相同点：</strong></p><ul><li>Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null</li></ul><p><strong>不同点：</strong></p><ul><li><p>null 转换成数字是 0, undefined 转换数字是<code>NaN</code></p></li><li><p>undefined 代表的含义是未定义， null 代表的含义是空对象。</p></li><li><p>typeof null 返回’object’，typeof undefined 返回’undefined’</p></li><li><p>&#96;&#96;&#96;js<br>null &#x3D;&#x3D; undefined; &#x2F;&#x2F; true<br>null &#x3D;&#x3D;&#x3D; undefined; &#x2F;&#x2F; false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 其实 null 不是对象，虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</span><br><span class="line"></span><br><span class="line">**说说 JavaScript 中判断数据类型的几种方法**</span><br><span class="line"></span><br><span class="line">**typeof**</span><br><span class="line"></span><br><span class="line">- `typeof`一般用来判断基本数据类型，**除了判断 null 会输出&quot;object&quot;，其它都是正确的**</span><br><span class="line">- `typeof`判断引用数据类型时，**除了判断函数会输出&quot;function&quot;,其它都是输出&quot;object&quot;**</span><br><span class="line"></span><br><span class="line">**instanceof**</span><br><span class="line"></span><br><span class="line">&gt; Instanceof 可以准确的判断引用数据类型，它的原理是检测构造函数的`prototype`属性是否在某个实例对象的原型链上， 不能判断基本数据类型</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">// instanceof 的实现</span><br><span class="line">function instanceofOper(left, right) &#123;</span><br><span class="line">  const prototype = right.prototype;</span><br><span class="line">  while (left) &#123;</span><br><span class="line">    if ((left = left.__proto__) === prototype) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line">// let obj  = &#123;&#125;</span><br><span class="line">// Object.getPrototypeOf(obj) === obj.__proto__ ==&gt; true</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 instanceof 2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> left !== <span class="string">&quot;object&quot;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// getProtypeOf是Object对象自带的API，能够拿到参数的原型对象</span></span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left);</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (proto === right.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//找到相同原型对象，返回true</span></span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(proto);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Object.prototype.toString.call()</strong> 返回 <code>[object Xxxx]</code> 都能判断</p><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">b</span>: <span class="string">&quot;xxx&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [&#123; <span class="attr">a</span>: <span class="string">&quot;ss&quot;</span> &#125;, obj, <span class="number">333</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr;</span><br><span class="line"><span class="comment">// 浅拷贝-只拷贝了一层，深层次的引用还是存在</span></span><br><span class="line"><span class="comment">// Object.assign(), ...扩展运算符，slice等</span></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">slice</span>();</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr];</span><br><span class="line">obj.<span class="property">b</span> = <span class="string">&quot;222&quot;</span>; <span class="comment">// arr2[1].b =&gt; 222</span></span><br><span class="line"><span class="comment">// arr[2] = 4444 ==&gt; arr2[2] ===&gt; 333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="comment">// 1. 最简单的，JSON.stringify，但这个有问题，看下面有说明</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 自己封装，要递归处理</span></span><br></pre></td></tr></table></figure><p>实现深拷贝-简单版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj &amp;&amp; <span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj.<span class="property">source</span>, obj.<span class="property">flags</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (map.<span class="title function_">get</span>(obj)) &#123;</span><br><span class="line">    <span class="comment">//  如果有循环引用、就返回这个对象</span></span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">get</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cloneObj = obj.<span class="title function_">constructor</span>(<span class="params"></span>); <span class="comment">// 数组的就是[],对象就是&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  map.<span class="title function_">set</span>(obj, cloneObj); <span class="comment">// 缓存对象，用于循环引用的情况</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], map);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-stringify-问题"><a href="#JSON-stringify-问题" class="headerlink" title="JSON.stringify 问题"></a><code>JSON.stringify</code> 问题</h3><ol><li><p>如果有循环引用就报错</p><p><img src="https://img-blog.csdnimg.cn/c224a6d165a14d969c014170533c13dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemjpmL_po54=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></li><li><p><code>Symbol</code>、<code>function</code>、<code>undefined</code>会丢失</p></li><li><p><code>布尔值</code>、<code>数字</code>、<code>字符串</code>的包装对象会转换成原始值</p></li><li><p><code>NaN</code>、<code>Infinity</code> 变成 <code>null</code></p></li><li><p><code>Date</code>类型的日期会变成字符串</p></li><li><p><code>RegExp</code>、<code>Error</code>被转换成了空对象 <code>&#123;&#125;</code></p></li></ol><p><img src="https://img-blog.csdnimg.cn/53927bb12f094d69b84298c445e4d088.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemjpmL_po54=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul><li><p><code>commonjs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由nodejs实现</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>ESM</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由es6实现</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $;</span><br></pre></td></tr></table></figure></li><li><p>AMD（异步加载模块）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由RequireJS实现</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&quot;juqery&quot;</span>, <span class="string">&quot;vue&quot;</span>], <span class="keyword">function</span> (<span class="params">$, Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// 依赖必须一开始就写好</span></span><br><span class="line">  $(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>CMD</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由SeaJS 实现</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line">  a.<span class="title function_">doSomething</span>();</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&quot;./b&quot;</span>); <span class="comment">// 依赖可以就近书写</span></span><br><span class="line">  b.<span class="title function_">doSomething</span>();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>UMD (通用加载模块)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span>, factory</span>) &#123;</span><br><span class="line">  <span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span> !== <span class="string">&#x27;undefined&#x27;</span> ? <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>() :</span><br><span class="line">  <span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span> ? <span class="title function_">define</span>(factory) :</span><br><span class="line">  (<span class="variable language_">global</span> = <span class="variable language_">global</span> || self, <span class="variable language_">global</span>.<span class="property">Vue</span> = <span class="title function_">factory</span>());</span><br><span class="line">&#125;(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="string">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="AMD-和-CMD-的区别有哪些"><a href="#AMD-和-CMD-的区别有哪些" class="headerlink" title="AMD 和 CMD 的区别有哪些"></a>AMD 和 CMD 的区别有哪些</h4><blockquote><p><a href="https://blog.csdn.net/qq_38912819/article/details/80597101">https://blog.csdn.net/qq_38912819/article/details/80597101</a></p></blockquote><ol><li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>延迟执行</strong>。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）</li><li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></li></ol><h4 id="CommonJS-与-ES6-Module-的差异"><a href="#CommonJS-与-ES6-Module-的差异" class="headerlink" title="CommonJS 与 ES6 Module 的差异"></a>CommonJS 与 ES6 Module 的差异</h4><p><strong>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</strong></p><ul><li>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li><li>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul><p><strong>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</strong></p><ul><li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li><li>编译时加载: ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li></ul><p><strong>CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</strong></p><h3 id="JS-延迟加载的方式"><a href="#JS-延迟加载的方式" class="headerlink" title="JS 延迟加载的方式"></a>JS 延迟加载的方式</h3><p>JavaScript 会阻塞 DOM 的解析，因此也就会阻塞 DOM 的加载。所以有时候我们希望延迟 JS 的加载来提高页面的加载速度。</p><ul><li>把 JS 放在页面的最底部</li><li>script 标签的 defer 属性：脚本会立即下载但延迟到整个页面加载完毕再执行。该属性对于内联脚本无作用 (即没有 <strong>「src」</strong> 属性的脚本）。</li><li>Async 是在外部 JS 加载完成后，浏览器空闲时，Load 事件触发前执行，标记为 async 的脚本并不保证按照指定他们的先后顺序执行，该属性对于内联脚本无作用 (即没有 <strong>「src」</strong> 属性的脚本）。</li><li>动态创建 script 标签，监听 dom 加载完毕再引入 js 文件</li></ul><h3 id="call、apply-、bind"><a href="#call、apply-、bind" class="headerlink" title="call、apply 、bind"></a>call、apply 、bind</h3><blockquote><p>call，apply, bind 都是改变 this 指向，bind 不会立即执行，会返回的是一个绑定 this 的新函数</p><p><a href="https://juejin.cn/post/6844903728147857415">面试官问：能否模拟实现 JS 的 call 和 apply 方法</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="title function_">call</span>(<span class="variable language_">this</span>指向, 参数<span class="number">1</span>， 参数<span class="number">2</span>)ss</span><br><span class="line">obj.<span class="title function_">apply</span>(<span class="variable language_">this</span>指向, [参数<span class="number">1</span>， 参数<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> result = fn.<span class="title function_">bind</span>(obj) <span class="comment">// bind会返回一个新的函数</span></span><br><span class="line"><span class="title function_">result</span>(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个 apply</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line">  context[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">var</span> res = context[fn](...<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">delete</span> context[fn];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实现一个 bind</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终版 删除注释 详细注释版请看上文</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> =</span><br><span class="line">  <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> ||</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">thisArg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="variable language_">this</span> + <span class="string">&quot; must be a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> bound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> boundArgs = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">      <span class="keyword">var</span> finalArgs = args.<span class="title function_">concat</span>(boundArgs);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> bound) &#123;</span><br><span class="line">        <span class="keyword">if</span> (self.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">          <span class="keyword">function</span> <span class="title function_">Empty</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">          <span class="title class_">Empty</span>.<span class="property"><span class="keyword">prototype</span></span> = self.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">          bound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Empty</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> result = self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, finalArgs);</span><br><span class="line">        <span class="keyword">var</span> isObject = <span class="keyword">typeof</span> result === <span class="string">&quot;object&quot;</span> &amp;&amp; result !== <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> isFunction = <span class="keyword">typeof</span> result === <span class="string">&quot;function&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (isObject || isFunction) &#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(thisArg, finalArgs);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a><a name="debounce">防抖</a></h3><blockquote><p>debounce 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">const</span> callNow = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a><a name="throttle">节流</a></h3><blockquote><p>就是指连续触发事件但是在 n 秒中只执行一次函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt;= wait) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      pre = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是指有权访问另一个函数作用域中的变量的函数 ——《JavaScript 高级程序设计》</p><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，</p><p>即使函数是在当前词法作用域之外执行 ——《你不知道的 JavaScript》</p><ul><li>闭包用途：<ol><li>能够访问函数定义时所在的词法作用域(阻止其被回收)</li><li>私有化变量</li><li>模拟块级作用域</li><li>创建模块</li></ol></li><li>闭包缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</li></ul><h3 id="原型、原型链-高频"><a href="#原型、原型链-高频" class="headerlink" title="原型、原型链(高频)"></a>原型、原型链(高频)</h3><p><strong>原型:</strong> 对象中固有的<code>__proto__</code>属性，该属性指向对象的<code>prototype</code>原型属性。</p><p><strong>原型链:</strong> 当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是<code>Object.prototype</code>所以这就是我们新建的对象为什么能够使用<code>toString()</code>等方法的原因。</p><p><strong>特点:</strong> <code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p><h3 id="this-指向、new-关键字"><a href="#this-指向、new-关键字" class="headerlink" title="this 指向、new 关键字"></a>this 指向、new 关键字</h3><p><code>this</code>对象是是执行上下文中的一个属性，它指向最后一次调用这个方法的对象，在全局函数中，<code>this</code>等于<code>window</code>，而当函数被作为某个对象调用时，this 等于那个对象。 在实际开发中，<code>this </code>的指向可以通过四种调用模式来判断。</p><ol><li>函数调用，当一个函数不是一个对象的属性时，直接作为函数来调用时，<code>this</code>指向全局对象。</li><li>方法调用，如果一个函数作为一个对象的方法来调用时，<code>this</code>指向这个对象。</li><li>构造函数调用，<code>this</code>指向这个用<code>new</code>新创建的对象。</li><li>第四种是 <code>apply 、 call 和 bind </code>调用模式，这三个方法都可以显示的指定调用函数的 this 指向。<code>apply</code>接收参数的是数组，<code>call</code>接受参数列表，&#96;&#96; bind<code>方法通过传入一个对象，返回一个</code>this<code>绑定了传入对象的新函数。这个函数的 </code>this<code>指向除了使用</code>new &#96;时会被改变，其他情况下都不会改变。</li></ol><p><strong>new</strong></p><blockquote><p><a href="https://juejin.cn/post/6844903704663949325">面试官问：能否模拟实现 JS 的 new 操作符</a></p></blockquote><ol><li>首先创建了一个新的空对象</li><li>设置原型，将对象的原型设置为函数的<code>prototype</code>对象。</li><li>让函数的<code>this</code>指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 操作符的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newOperator</span>(<span class="params">ctor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> ctor !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;newOperator function the first param must be a function&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  newOperator.<span class="property">target</span> = ctor;</span><br><span class="line">  <span class="keyword">var</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(ctor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">var</span> argsArr = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> ctorReturnResult = ctor.<span class="title function_">apply</span>(newObj, argsArr);</span><br><span class="line">  <span class="keyword">var</span> isObject =</span><br><span class="line">    <span class="keyword">typeof</span> ctorReturnResult === <span class="string">&quot;object&quot;</span> &amp;&amp; ctorReturnResult !== <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> isFunction = <span class="keyword">typeof</span> ctorReturnResult === <span class="string">&quot;function&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (isObject || isFunction) &#123;</span><br><span class="line">    <span class="keyword">return</span> ctorReturnResult;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域、作用域链、变量提升"><a href="#作用域、作用域链、变量提升" class="headerlink" title="作用域、作用域链、变量提升"></a>作用域、作用域链、变量提升</h3><p><code>作用域</code>负责收集和维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。(全局作用域、函数作用域、块级作用域)。 作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是<code>作用域链</code>。</p><h3 id="继承-含-es6-、多种继承方式"><a href="#继承-含-es6-、多种继承方式" class="headerlink" title="继承(含 es6)、多种继承方式"></a>继承(含 es6)、多种继承方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在睡觉！&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在吃：&quot;</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（1）第一种是以<code>原型链的方式来实现继承</code>，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;小黄&quot;</span>); <span class="comment">// 缺点 无法实现多继承 来自原型对象的所有属性被所有实例共享</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;cat&quot;</span>;</span><br></pre></td></tr></table></figure><p>（2）第二种方式是使用<code>借用构造函数</code>的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借用构造函数继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;小黄&quot;</span>);</span><br><span class="line">  <span class="comment">// 缺点 只能继承父类实例的属性和方法，不能继承原型上的属性和方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）第三种方式是<code>组合继承</code>，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p><p>（4）第四种方式是<code>原型式继承</code>，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）第五种方式是<code>寄生式继承</code>，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">original</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="title function_">object</span>(original); <span class="comment">//通过调用object函数创建一个新对象</span></span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//以某种方式来增强这个对象</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone; <span class="comment">//返回这个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）第六种方式是<code>寄生式组合继承</code>，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">subClass, superClass</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="title function_">object</span>(superClass.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//创建对象</span></span><br><span class="line">  prototype.<span class="property">constructor</span> = subClass; <span class="comment">//增强对象</span></span><br><span class="line">  subClass.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">//指定对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>大家都知道 JS 中在使用运算符号或者对比符时，会自带隐式转换，规则如下:</p><p>-、*、&#x2F;、% ：一律转换成数值后计算</p><p>+：</p><ul><li><p>数字 + 字符串 &#x3D; 字符串， 运算顺序是从左到右</p></li><li><p>数字 + 对象， 优先调用对象的 valueOf -&gt; toString</p></li><li><p>数字 + boolean&#x2F;null -&gt; 数字</p></li><li><p>数字 + undefined -&gt; NaN</p></li><li><p>[1].toString() &#x3D;&#x3D;&#x3D; ‘1’ 内部调用 .join 方法</p></li><li><p>{}.toString() &#x3D;&#x3D;&#x3D; ‘[object object]’</p></li><li><p>NaN !&#x3D;&#x3D; NaN 、+undefined 为 NaN</p></li></ul><h3 id="Object-is-与比较操作符-、-的区别？"><a href="#Object-is-与比较操作符-、-的区别？" class="headerlink" title="Object.is()与比较操作符==、===的区别？"></a>Object.is()与比较操作符<code>==</code>、<code>===</code>的区别？</h3><ul><li><code>==</code>会先进行类型转换再比较</li><li><code>===</code>比较时不会进行类型转换，类型不同则直接返回 false</li><li><code>Object.is()</code>在<code>===</code>基础上特别处理了<code>NaN</code>,<code>-0</code>,<code>+0</code>,保证-0 与+0 不相等，但 NaN 与 NaN 相等</li></ul><h4 id="操作符的强制类型转换规则"><a href="#操作符的强制类型转换规则" class="headerlink" title="==操作符的强制类型转换规则"></a><code>==</code>操作符的强制类型转换规则</h4><ul><li>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。</li><li>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</li><li>null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</li><li>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。</li><li>如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。</li><li>如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/d5175667072fe77e2182f89306bcdb77.webp?x-oss-process=image/format,png" alt="img"></p><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ol><li>新增 Symbol 类型 表示独一无二的值，用来定义独一无二的对象属性名;</li><li>const&#x2F;let 都是用来声明变量,不可重复声明，具有块级作用域。存在暂时性死区，不存在变量提升。(const 一般用于声明常量);</li><li>变量的解构赋值(包含数组、对象、字符串、数字及布尔值,函数参数),剩余运算符(…rest);</li><li>模板字符串(<code>$&#123;data&#125;</code>);</li><li><code>...</code>扩展运算符(数组、对象);;</li><li>箭头函数;</li><li>Set 和 Map 数据结构;</li><li>Proxy&#x2F;Reflect;</li><li>Promise;</li><li>async 函数;</li><li>Class;</li><li>Module 语法(import&#x2F;export)。</li></ol><h3 id="let-x2F-const"><a href="#let-x2F-const" class="headerlink" title="let&#x2F;const"></a>let&#x2F;const</h3><blockquote><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变 <a href="https://es6.ruanyifeng.com/#docs/let">https://es6.ruanyifeng.com/#docs/let</a></p></blockquote><p>var 在全局作用域中声明的变量会变成全局变量</p><p>let、const 和 var 的区别</p><ul><li><p>不允许重复声明</p></li><li><p>不存在变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>暂时性死区（不能在未声明之前使用）</p><blockquote><p>注意暂时性死区和不存在变量提升不是同一个东西</p></blockquote><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>; <span class="comment">// 声明了 tmp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&quot;abc&quot;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>块级作用域：用 let 和 const 声明的变量，在这个块中会形成块级作用域</p><p><strong>es5 只有函数作用域和全局作用域</strong></p><p>IIFE <code>立即执行函数表达式</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE 写法</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域写法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-的一些叫法"><a href="#ES6-的一些叫法" class="headerlink" title="ES6 的一些叫法"></a>ES6 的一些叫法</h3><ul><li><p>reset 参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li><li><p>扩展运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123; ...&#123; <span class="attr">a</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">b</span>: <span class="string">&quot;3&quot;</span> &#125; &#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>?.</code> 可选链运算符</p><blockquote><p>左侧的对象是否为<code>null</code>或<code>undefined</code>。如果是的，就不再往下运算，而是返回<code>undefined</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a?.<span class="property">b</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">a == <span class="literal">null</span> ? <span class="literal">undefined</span> : a.<span class="property">b</span>;</span><br><span class="line"><span class="comment">// 注意 undefined == null ==&gt; true</span></span><br></pre></td></tr></table></figure></li><li><p><code>??</code> Null 判断运算符</p></li></ul><blockquote><p><a href="https://es6.ruanyifeng.com/#docs/operator#Null-%E5%88%A4%E6%96%AD%E8%BF%90%E7%AE%97%E7%AC%A6">https://es6.ruanyifeng.com/#docs/operator#Null-%E5%88%A4%E6%96%AD%E8%BF%90%E7%AE%97%E7%AC%A6</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> headerText = response.<span class="property">settings</span>.<span class="property">headerText</span> ?? <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> animationDuration = response.<span class="property">settings</span>.<span class="property">animationDuration</span> ?? <span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> showSplashScreen = response.<span class="property">settings</span>.<span class="property">showSplashScreen</span> ?? <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>但左侧的为 <code>undefined</code>或者<code>null</code>是就返回右边的，否则就直接返回左边的</p><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><ol><li>箭头函数没有<code>this</code>，<code>this</code>是继承于当前的上下文，不能通过<code>call</code>,<code>apply</code>,<code>bind</code>去改变 this</li><li>箭头函数没有自己的 <code>arguments</code> 对象，但是可以访问外围函数的 <code>arguments </code>对象</li><li>不能通过<code> new</code> 关键字调用(不能作为构造函数)，同样也没有 <code>new.target</code> 和原型</li></ol><h3 id="如何解决异步回调地狱"><a href="#如何解决异步回调地狱" class="headerlink" title="如何解决异步回调地狱"></a><strong>如何解决异步回调地狱</strong></h3><p>promise、generator、async&#x2F;await</p><h3 id="mouseover-和-mouseenter-的区别"><a href="#mouseover-和-mouseenter-的区别" class="headerlink" title="mouseover 和 mouseenter 的区别"></a><strong>mouseover</strong> <strong>和</strong> <strong>mouseenter</strong> <strong>的区别</strong></h3><p>mouseover：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发， </p><p>冒泡的过程。对应的移除事件是 mouseout </p><p>mouseenter：当鼠标移除元素本身（不包含元素的子元素）会触发事件，也就是 </p><p>不会冒泡，对应的移除事件是 mouseleave </p><h3 id="setTimeout、setInterval-和-requestAnimationFrame-之间的区别"><a href="#setTimeout、setInterval-和-requestAnimationFrame-之间的区别" class="headerlink" title="setTimeout、setInterval 和 requestAnimationFrame 之间的区别"></a>setTimeout、setInterval 和 requestAnimationFrame 之间的区别</h3><p>与 setTimeout 和 setInterval 不同，requestAnimationFrame 不需要设置时间 间隔， 大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏 览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频 率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是 1000ms&#x2F;60，约 等于 16.6ms。 RAF 采用的是系统时间间隔，不会因为前面的任务，不会影响 RAF，但是如果前 面的任务多的话，会响应 setTimeout 和 setInterval 真正运行时的时间间隔。 特点：</p><p>（1）requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次 重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。<br>（2）在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回 流，这当然就意味着更少的 CPU、GPU 和内存使用量<br>（3）requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览 器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停， 有效节省了 CPU 开销。</p><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p>vue2 是通过<code>Object.defineProperty</code>来实现响应式的，所以就会有一些缺陷</p><ol><li>当修改一个对象的某个键值属性时，当这个键值没有在这个对象中，vue 不能做响应式处理</li><li>但直接修改数组的某一项（<code>arr[index]=&#39;xxx&#39;</code>）vue 不能做响应式处理</li></ol><p>可用下面的解决响应式</p><ol><li>Vue.set &#x3D;&#x3D;&gt; this.$set(对象\数组， key 值、index， value)</li><li>修改数组<code>length</code>, 调用数据的 <code>splice</code> 方法</li></ol><h3 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate 实例化之前这里能拿到<span class="variable language_">this</span>，但是还不能拿到data里面的数据</span><br><span class="line">created  实例化之后</span><br><span class="line"><span class="title function_">beforeMount</span>()</span><br><span class="line"><span class="title function_">mounted</span>() $el</span><br><span class="line">beforeUpdate</span><br><span class="line">updated</span><br><span class="line"></span><br><span class="line">beforeDestroy 清除定时/移除监听事件</span><br><span class="line">destroyed</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被keep-alive 包裹的</span></span><br><span class="line"><span class="comment">// keep-alive 标签 include exclude max</span></span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父子</span></span><br><span class="line">父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 离开页面：实例销毁 --&gt; DOM卸载</span></span><br><span class="line">parent  beforeDestroy</span><br><span class="line">child   beforeDestroy</span><br><span class="line">child   destroyed</span><br><span class="line">parent  destroyed</span><br></pre></td></tr></table></figure><h3 id="Vue-的-data-为什么是一个函数"><a href="#Vue-的-data-为什么是一个函数" class="headerlink" title="Vue 的 data 为什么是一个函数"></a>Vue 的 data 为什么是一个函数</h3><p>因为 Vue 的组件可能会在很多地方使用， 会产生多个实例，如果返回的是对象的， 这些组件之间的数据是同一份（引用关系），那么修改其中一个组件的数据，另外一个组件的数据都会被修改到</p><h3 id="Vue-key-值的作用"><a href="#Vue-key-值的作用" class="headerlink" title="Vue key 值的作用"></a>Vue key 值的作用</h3><blockquote><p>看这个视频，你能给面试官说这些，你就很不错了，vue 和 react 的差不多 <a href="https://www.bilibili.com/video/BV1wy4y1D7JT?p=48">https://www.bilibili.com/video/BV1wy4y1D7JT?p=48</a></p></blockquote><p>…待更新</p><h3 id="Vue-双向数据绑定原理"><a href="#Vue-双向数据绑定原理" class="headerlink" title="Vue 双向数据绑定原理"></a>Vue 双向数据绑定原理</h3><blockquote><p>下面是照抄的一段话，个人觉得这个主要看个人理解，如果看过源码理解 MVVM 这方面的，就很简单</p></blockquote><p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持</p><p>各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>具体步骤：</p><p>第一步：需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter</p><p>和 getter</p><p>这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</p><p>第二步：compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，</p><p>并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通</p><p>知，更新视图</p><p>第三步：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是:</p><p>1、在自身实例化时往属性订阅器(dep)里面添加自己</p><p>2、自身必须有一个 update()方法</p><p>3、待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的</p><p>回调，则功成身退。</p><p>第四步：MVVM 作为数据绑定的入口，整合 Observer、</p><p>Compile 和 Watcher 三者，通过 Observer</p><p>来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起</p><p>Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数</p><p>据 model 变更的双向绑定效果。</p><p>所以也可以根据这个来说明为什么 给<code>Vue</code>对象不存在的属性设置值的时候不生效，直接修改数组的<code>index</code>不生效</p><p>Vue 提供了 <code> Vue.set(对象|数组, key|index, 值)</code>修改触发响应式，重新数组的原型方法实现响应式</p><h3 id="Vue-extend-和-mixins"><a href="#Vue-extend-和-mixins" class="headerlink" title="Vue extend 和 mixins"></a>Vue extend 和 mixins</h3><p>vue extend 和 mixins 的区别， mixins 里面的 函数和本身的函数重名了使用哪一个，mixins 里面的生命周期和本身的生命周期哪一个先执行</p><p>…待更新</p><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component 动态组件，通过is设置要显示的组件</span></span><br><span class="line">&lt;component is=<span class="string">&quot;UserInfo&quot;</span> &gt;</span><br></pre></td></tr></table></figure><h3 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h3><p>就是给组件设置<code>name</code>，之后就可以在当前组件去递归使用组件</p><h3 id="Vue-组件间的传值的几种方式"><a href="#Vue-组件间的传值的几种方式" class="headerlink" title="Vue 组件间的传值的几种方式"></a>Vue 组件间的传值的几种方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue组件间的传值的几种方式</span></span><br><span class="line"><span class="number">1.</span> props/emit</span><br><span class="line"><span class="number">2.</span> $attrs/$listeners <span class="comment">// $attrs 除了父级作用域 props、class、style 之外的属性</span></span><br><span class="line"><span class="comment">// $listeners 父组件里面的所有的监听方法</span></span><br><span class="line"><span class="number">3.</span> $refs/$parent/$children/$root/</span><br><span class="line"><span class="number">4.</span> vuex</span><br><span class="line"><span class="number">5.</span> 事件总线，通过<span class="keyword">new</span> <span class="title class_">Vue</span>去实现 / mitt &lt;==&gt; vue3</span><br><span class="line"><span class="number">6.</span> provide/inject</span><br><span class="line">    <span class="comment">// 父组件</span></span><br><span class="line">    <span class="attr">props</span>: &#123;&#125;,</span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">user</span>: <span class="variable language_">this</span>.<span class="property">user</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子组件</span></span><br><span class="line">    <span class="attr">props</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">inject</span>: [<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line"><span class="number">7.</span> 本地存储、全局变量</span><br></pre></td></tr></table></figure><h3 id="watch、mixins、组件顺序、组件配置"><a href="#watch、mixins、组件顺序、组件配置" class="headerlink" title="watch、mixins、组件顺序、组件配置"></a>watch、mixins、组件顺序、组件配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;MyComponentName&quot;</span>,</span><br><span class="line">  <span class="attr">mixins</span>: [tableMixin],</span><br><span class="line">  <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&quot;xxx&quot;</span>],</span><br><span class="line">  <span class="comment">// props: [&#x27;value&#x27;, &#x27;visible&#x27;],</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">type</span>: &#123;</span><br><span class="line">      <span class="comment">// required: true,</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      <span class="title function_">validator</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;primary&quot;</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;danger&quot;</span>, <span class="string">&quot;success&quot;</span>, <span class="string">&quot;info&quot;</span>].<span class="title function_">includes</span>(</span><br><span class="line">          val</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">list</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> [],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// vue2</span></span><br><span class="line">      <span class="attr">obj</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;李四~&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// vue2 会进行深度合并</span></span><br><span class="line">      <span class="comment">// obj  &#123;&quot;name&quot;:&quot;李四~&quot;,&quot;age&quot;:19&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// vue3 &#123; name: &quot;李四~&quot; &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// provide 不支持响应式，想支持响应式的话我们要传对象</span></span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">userName</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">user</span>: <span class="variable language_">this</span>.<span class="property">user</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// fullName() &#123;</span></span><br><span class="line">    <span class="comment">//   return &#x27;xxxxx&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">fullName</span>: &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">userName</span>;</span><br><span class="line">        <span class="comment">// return &#x27;李四&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;SET_NAME&quot;</span>, val);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// name(value) &#123;</span></span><br><span class="line">    <span class="comment">//   this.handlerName()</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// name: &#123;</span></span><br><span class="line">    <span class="comment">//   immediate: true,</span></span><br><span class="line">    <span class="comment">//   deep: true, //</span></span><br><span class="line">    <span class="comment">//   handler(val, oldValue) &#123;</span></span><br><span class="line">    <span class="comment">//     this.handlerName()</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// this.obj.name = &#x27;xxxx&#x27; 这样不会执行</span></span><br><span class="line">    <span class="comment">// this.obj = &#123;name: &#x27;xxx&#x27;&#125; 这样才会执行</span></span><br><span class="line">    <span class="comment">// obj(value) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27; value: &#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//  和上面等价</span></span><br><span class="line">    <span class="comment">// obj: &#123;</span></span><br><span class="line">    <span class="comment">//   handler(value) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&quot; value: &quot;, value)</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// this.obj.name = &#x27;xxxx&#x27; 这样去修改也能监听</span></span><br><span class="line">    <span class="comment">// obj: &#123;</span></span><br><span class="line">    <span class="comment">//   deep: true, // 深度监听</span></span><br><span class="line">    <span class="comment">//   immediate: true, // 第一次就用执行这个方法，可以理解为在 created 的时候会执行 handler</span></span><br><span class="line">    <span class="comment">//   handler(value) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&quot; value: &quot;, value)</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// obj: &#123;</span></span><br><span class="line">    <span class="comment">//   deep: true, // 深度监听</span></span><br><span class="line">    <span class="comment">//   immediate: true, // 第一次就用执行这个方法，可以理解为在 created 的时候会执行 handler</span></span><br><span class="line">    <span class="comment">//   handler: &#x27;handlerName&#x27;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// ==》</span></span><br><span class="line">    <span class="comment">// obj: &#x27;handlerName&#x27;</span></span><br><span class="line">    <span class="comment">// &#x27;$route.path&#x27;: &#123;&#125;,</span></span><br><span class="line">    <span class="comment">// &#x27;obj.a&#x27; : &#123;&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.handlerName()</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  this.fullName &#x27;李四&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handlerName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">obj</span>.<span class="property">name</span> = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>常用指令</p><ul><li><p><code>v-show</code> <code>dispaly none</code> 的切换</p></li><li><p><code>v-if</code>&#x2F;<code>v-else</code></p></li><li><p><code>v-html </code></p></li><li><p><code>v-text</code></p></li><li><p><code>v-for</code> (vue2 <code>v-for</code>比<code>v-if</code>优先级高，vu3<code>v-if</code>优先级比<code>v-for</code>高 )</p></li><li><p><code>v-cloak</code> <code> [v-cloak] &#123;dispaly:none&#125;</code></p></li><li><p><code>v-once</code> 静态内容</p></li><li><p><code>v-bind </code>&#x3D;&gt; <code>:</code> <code>v-on</code> &#x3D;&gt; <code>@</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--- 可以直接 v-bind=&quot;object&quot; v-on=&quot;object&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-model</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--- 等价下面这个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:value</span>=<span class="string">&quot;keyword&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;keyword = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;指令名&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// 生命周期</span></span><br><span class="line">  <span class="comment">// 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span></span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding, vnode, oldVnode</span>) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// binging.value 拿到指令值</span></span><br><span class="line">    <span class="comment">// binding.modifiers 修饰符对象</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</span></span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">componentUpdated</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 只调用一次，指令与元素解绑时调用</span></span><br><span class="line">  <span class="title function_">unbind</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认绑定 bind update 的生命周期</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;指令名&quot;</span>, <span class="keyword">function</span> (<span class="params">el, binding, vnode, oldVnode</span>) &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><p>.lazy、.number、.trim、.enter、.prevent、.self</p></li><li><p><code>.sync</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Dialog</span>  <span class="attr">:visible.sync</span>=<span class="string">&quot;visible&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--- 等价下面这个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Dialog</span>  <span class="attr">:visible</span>=<span class="string">&quot;visible&quot;</span> @<span class="attr">update:visible</span>=<span class="string">&quot;visible = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h3><p>加了 scoped 就只作用于当前组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">== &gt; <span class="selector-class">.a</span> <span class="selector-class">.b</span><span class="selector-attr">[data-v-xx]</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> /deep/ <span class="selector-class">.b</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">== &gt; <span class="selector-class">.a</span><span class="selector-attr">[data-v-xxx]</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &gt;&gt;&gt; <span class="selector-class">.b</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">== &gt; <span class="selector-class">.a</span><span class="selector-attr">[data-v-xxx]</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> ::v-deep .b &#123;</span><br><span class="line">&#125;</span><br><span class="line">== &gt; <span class="selector-class">.a</span><span class="selector-attr">[data-v-xxx]</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a><code>vue-router</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;hash&#x27;</span>, <span class="comment">// hash | history | abstract</span></span><br><span class="line">    <span class="comment">// 滚动位置</span></span><br><span class="line">    <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (savedPosition) <span class="keyword">return</span> savedPosition</span><br><span class="line">       <span class="keyword">return</span> &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="comment">// 路由独享守卫</span></span><br><span class="line">            <span class="title function_">beforeEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件内的路由</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">query</span>: &#123;&#125;&#125;)</span><br><span class="line"><span class="comment">// 路由信息</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span></span><br></pre></td></tr></table></figure><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a><code>vuex</code></h3><p>state getters mutations actions modules</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">userInfo</span>;</span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">userInfo</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;SET_USER_INFO&quot;</span>, <span class="string">&quot;传递数据&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;logout&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line"><span class="comment">// modules &gt; user</span></span><br><span class="line"><span class="comment">// namespaced: true,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// state 拿 name</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">user</span>.<span class="property">avatar</span>;</span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">user</span>.<span class="property">avatar</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;user/SET_TOKEN&quot;</span>, <span class="string">&quot;传递数据&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;user/login&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line"><span class="comment">// modules &gt; user</span></span><br><span class="line"><span class="comment">// namespaced: false,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// state 拿 name</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">user</span>.<span class="property">avatar</span>;</span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">user</span>.<span class="property">avatar</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;SET_TOKEN&quot;</span>, <span class="string">&quot;传递数据&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;login&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>辅助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapState, mapGetters, mapMutations, mapActions;</span><br></pre></td></tr></table></figure><h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><blockquote><p><a href="https://juejin.cn/post/6999687348120190983">Vue3 的 8 种和 Vue2 的 12 种组件通信，值得收藏</a></p><p><a href="https://juejin.cn/post/7026249448233631752">聊一聊 Vue3 的 9 个知识点</a></p></blockquote><p><strong>Vue3 有哪些变化</strong></p><ul><li>新增了三个组件：<code>Fragment</code> 支持多个根节点、<code>Suspense</code> 可以在组件渲染之前的等待时间显示指定内容、<code>Teleport</code> 可以让子组件能够在视觉上跳出父组件(如父组件 overflow:hidden)</li><li>新增指令 <code>v-memo</code>，可以缓存 html 模板，比如 v-for 列表不会变化的就缓存，简单说就是用内存换时间</li><li>支持 <code>Tree-Shaking</code>，会在打包时去除一些无用代码，没有用到的模块，使得代码打包体积更小</li><li>新增 <code>Composition API</code> 可以更好的逻辑复用和代码组织，同一功能的代码不至于像以前一样太分散，虽然 Vue2 中可以用 minxin 来实现复用代码，但也存在问题，比如方法或属性名会冲突，代码来源也不清楚等</li><li>用 <code>Proxy</code> 代替 <code>Object.defineProperty</code> 重构了响应式系统，可以监听到数组下标变化，及对象新增属性，因为监听的不是对象属性，而是对象本身，还可拦截 apply、has 等 13 种方法</li><li>重构了虚拟 DOM，在编译时会将事件缓存、将 slot 编译为 lazy 函数、保存静态节点直接复用(静态提升)、以及添加静态标记、Diff 算法使用 最长递增子序列 优化了对比流程，使得虚拟 DOM 生成速度提升 <code>200%</code></li><li>支持在 <code>&lt;style&gt;&lt;/style&gt;</code> 里使用 <code>v-bind</code>，给 CSS 绑定 JS 变量(<code>color: v-bind(str)</code>)</li><li>用 <code>setup</code> 代替了 beforeCreate 和 created 这两个生命周期</li><li>新增了<strong>开发环境</strong>的两个钩子函数，在组件更新时 <code>onRenderTracked</code> 会跟踪组件里所有变量和方法的变化、每次触发渲染时 <code>onRenderTriggered</code> 会返回发生变化的新旧值，可以让我们进行有针对性调试</li><li>毕竟 Vue3 是用 <code>TS</code> 写的，所以对 <code>TS</code> 的支持度更好</li><li>Vue3 不兼容 <code>IE11</code></li></ul><h3 id="vue3-生命周期"><a href="#vue3-生命周期" class="headerlink" title="vue3 生命周期"></a>vue3 生命周期</h3><table><thead><tr><th>选项式 API</th><th>Hook inside <code>setup</code></th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td>Not needed*</td></tr><tr><td><code>created</code></td><td>Not needed*</td></tr><tr><td><code>beforeMount</code></td><td><code>onBeforeMount</code></td></tr><tr><td><code>mounted</code></td><td><code>onMounted</code></td></tr><tr><td><code>beforeUpdate</code></td><td><code>onBeforeUpdate</code></td></tr><tr><td><code>updated</code></td><td><code>onUpdated</code></td></tr><tr><td><code>beforeUnmount</code></td><td><code>onBeforeUnmount</code></td></tr><tr><td><code>unmounted</code></td><td><code>onUnmounted</code></td></tr><tr><td><code>errorCaptured</code></td><td><code>onErrorCaptured</code></td></tr><tr><td><code>renderTracked</code></td><td><code>onRenderTracked</code></td></tr><tr><td><code>renderTriggered</code></td><td><code>onRenderTriggered</code></td></tr><tr><td><code>activated</code></td><td><code>onActivated</code></td></tr><tr><td><code>deactivated</code></td><td><code>onDeactivated</code></td></tr></tbody></table><h3 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&quot;./components/HelloWorld.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;HelloWorld&quot;</span>, <span class="title class_">HelloWorld</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局属性</span></span><br><span class="line"><span class="comment">// vue2.0 Vue.prototype.$http</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$http</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http ==&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--- App.vue  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-model=&quot;xxx&quot;  &lt;==&gt; v-model:modelValue=&quot;xxx&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- :value=&quot;xxx&quot; @input=&quot;xxx = $event&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value $emit(&#x27;input&#x27;, &#x27;传递&#x27;) --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      visible.sync=&quot;visible&quot; </span></span><br><span class="line"><span class="comment">      ==&gt;</span></span><br><span class="line"><span class="comment">      :visible=&quot;visible&quot; @update:visible=&quot;visible = $event&quot;</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- vue3 把 .sync 去掉，==&gt; </span></span><br><span class="line"><span class="comment">        v-model:visible=&quot;visible&quot;</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--     </span></span><br><span class="line"><span class="comment">    &lt;div :ref=&quot;setDivRef&quot;&gt;</span></span><br><span class="line"><span class="comment">      count: &#123;&#123; count &#125;&#125;</span></span><br><span class="line"><span class="comment">      &lt;p&gt;</span></span><br><span class="line"><span class="comment">        &lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="comment">        &lt;button @click=&quot;reduce&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="comment">      &lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;ul&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;姓名：&#123;&#123; user.name &#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">      &lt;li&gt;年龄：&#123;&#123; user.age &#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-model=&quot;num&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">&quot;父组件传递的title&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:modelValue</span>=<span class="string">&quot;num&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">update:modelValue</span>=<span class="string">&quot;num = $event&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">&quot;onChildChange&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model:visible</span>=<span class="string">&quot;visible&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;childRef&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;HelloWorld&gt;&lt;/HelloWorld&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&quot;./Child-setup.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/reactivity&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted, provide &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/runtime-core&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     msg: &#x27;哈哈哈&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;哈哈哈2&quot;</span>); <span class="comment">// =&gt; reactive(&#123;value: 哈哈哈2 &#125;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> obj = <span class="title function_">ref</span>(&#123; <span class="attr">x</span>: <span class="string">&quot;xx&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; obj.value: &quot;</span>, obj.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">provide</span>(<span class="string">&quot;count&quot;</span>, count);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">provide</span>(<span class="string">&quot;http&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;$http &gt;&gt;&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        count.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">reduce</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        count.<span class="property">value</span>--;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> visible = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.$refs.childRef x</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// refs</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 用字符串</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> childRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; childRef.value: &quot;</span>, childRef.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> divRef;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">setDivRef</span> = (<span class="params">el</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; el: &quot;</span>, el);</span></span><br><span class="line"><span class="language-javascript">        divRef = el;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        msg,</span></span><br><span class="line"><span class="language-javascript">        user,</span></span><br><span class="line"><span class="language-javascript">        count,</span></span><br><span class="line"><span class="language-javascript">        add,</span></span><br><span class="line"><span class="language-javascript">        reduce,</span></span><br><span class="line"><span class="language-javascript">        num,</span></span><br><span class="line"><span class="language-javascript">        visible,</span></span><br><span class="line"><span class="language-javascript">        childRef,</span></span><br><span class="line"><span class="language-javascript">        setDivRef,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onChildChange</span>(<span class="params"></span>) &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Child-composition-（组合式-api）"><a href="#Child-composition-（组合式-api）" class="headerlink" title="Child-composition （组合式 api）"></a>Child-composition （组合式 api）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  1. 多个片段， 多个根标签 </span></span><br><span class="line"><span class="comment">  2. v-for v-if 优先级变化 v3 v-if &gt; v-for</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;triggerEvent&quot;</span>&gt;</span>触发事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num2：&#123;&#123; num2 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>count：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    modelValue：&#123;&#123; modelValue &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    visible：&#123;&#123; visible &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateVisible&quot;</span>&gt;</span>更新visible<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;visible&quot;</span>&gt;</span>对话框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    computed,</span></span><br><span class="line"><span class="language-javascript">    inject,</span></span><br><span class="line"><span class="language-javascript">    onActivated,</span></span><br><span class="line"><span class="language-javascript">    onBeforeMount,</span></span><br><span class="line"><span class="language-javascript">    onBeforeUnmount,</span></span><br><span class="line"><span class="language-javascript">    onBeforeUpdate,</span></span><br><span class="line"><span class="language-javascript">    onDeactivated,</span></span><br><span class="line"><span class="language-javascript">    onMounted,</span></span><br><span class="line"><span class="language-javascript">    onUnmounted,</span></span><br><span class="line"><span class="language-javascript">    onUpdated,</span></span><br><span class="line"><span class="language-javascript">    watch,</span></span><br><span class="line"><span class="language-javascript">    watchEffect,</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/runtime-core&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">modelValue</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">visible</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// computed: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   num2() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     return this.modelValue * 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">emits</span>: [<span class="string">&quot;change&quot;</span>, <span class="string">&quot;update:modelValue&quot;</span>, <span class="string">&quot;update:visible&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 发生在 beforeCreate</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// attrs 除了 class style,props 之外的属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// watch: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   title: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     deep: true, // 深度简单</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 组合式API(composition),  选项式API(options)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params">props, &#123; emit, attrs, slots &#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; attrs: &quot;</span>, attrs);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; props: &quot;</span>, props);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// computed</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> num2 = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">modelValue</span> * <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const num2 = computed(&#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   get: () =&gt; props.modelValue * 2,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   set: (val) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     ssss</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> count = <span class="title function_">inject</span>(<span class="string">&quot;count&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; count: &quot;</span>, count);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// watch</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.$watch()</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> unwatch = <span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="function">() =&gt;</span> props.<span class="property">modelValue</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">newVal, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; newVal: &quot;</span>, newVal);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (newVal &gt;= <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 取消监听</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">unwatch</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// immediate: true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 自动收集依赖，所以会初始化的时候就执行一次</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; props.modelValue: &quot;</span>, props.<span class="property">modelValue</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// hooks</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;哈哈哈&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// keep-alive</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onActivated</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onDeactivated</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// methods</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">triggerEvent</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emit</span>(<span class="string">&quot;change&quot;</span>, <span class="string">&quot;传递的数据&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emit</span>(<span class="string">&quot;update:modelValue&quot;</span>, props.<span class="property">modelValue</span> + <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">updateVisible</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; props.visible: &quot;</span>, props.<span class="property">visible</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emit</span>(<span class="string">&quot;update:visible&quot;</span>, !props.<span class="property">visible</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        triggerEvent,</span></span><br><span class="line"><span class="language-javascript">        add,</span></span><br><span class="line"><span class="language-javascript">        updateVisible,</span></span><br><span class="line"><span class="language-javascript">        num2,</span></span><br><span class="line"><span class="language-javascript">        count,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// beforeCreate() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;beforeCreate&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// created() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;created&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// beforeDestroy beforeUnmount</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// destroyed unmounted</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Child-setup"><a href="#Child-setup" class="headerlink" title="Child-setup"></a>Child-setup</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>title: &#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num2: &#123;&#123; num2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      modelValue：&#123;&#123; modelValue &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;triggerEvent&quot;</span>&gt;</span>触发事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; v-model=&quot;inputValue&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;inputValue&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInputUpdate&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- volar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Foo</span>&gt;</span><span class="tag">&lt;/<span class="name">Foo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--- vue 3.2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    computed,</span></span><br><span class="line"><span class="language-javascript">    getCurrentInstance,</span></span><br><span class="line"><span class="language-javascript">    inject,</span></span><br><span class="line"><span class="language-javascript">    ref,</span></span><br><span class="line"><span class="language-javascript">    useAttrs,</span></span><br><span class="line"><span class="language-javascript">    useSlots,</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/runtime-core&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Foo</span> <span class="keyword">from</span> <span class="string">&quot;./foo.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// props</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">modelValue</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// computed</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> num2 = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">modelValue</span> * <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">inject</span>(<span class="string">&quot;count&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// emit</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;change&quot;</span>, <span class="string">&quot;update:modelValue&quot;</span>, <span class="string">&quot;update:visible&quot;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">triggerEvent</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&quot;change&quot;</span>, <span class="string">&quot;传递的数据&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&quot;update:modelValue&quot;</span>, props.<span class="property">modelValue</span> + <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 向父组件暴露自己的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    num2,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;888&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; attrs: &quot;</span>, attrs);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> solts = <span class="title function_">useSlots</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> ctx = <span class="title function_">getCurrentInstance</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> http = ctx.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$http</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">http</span>(<span class="string">&quot;xxx&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> $http = <span class="title function_">inject</span>(<span class="string">&quot;http&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  $http();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// $ref: ref(false)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> inputValue = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">onInputUpdate</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; event: &quot;</span>, event);</span></span><br><span class="line"><span class="language-javascript">    inputValue.<span class="property">value</span> = event.<span class="property">target</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><a href="https://shfshanyue.github.io/cheat-sheets/git">https://shfshanyue.github.io/cheat-sheets/git</a></p><h4 id="git-pull-和-git-featch-的区别"><a href="#git-pull-和-git-featch-的区别" class="headerlink" title="git pull 和 git featch 的区别"></a>git pull 和 git featch 的区别</h4><h4 id="怎么样进行合并，比如把-mater-分支合并到-dev-分支"><a href="#怎么样进行合并，比如把-mater-分支合并到-dev-分支" class="headerlink" title="怎么样进行合并，比如把 mater 分支合并到 dev 分支"></a>怎么样进行合并，比如把 mater 分支合并到 dev 分支</h4><h3 id="Webpack-一些核心概念："><a href="#Webpack-一些核心概念：" class="headerlink" title="Webpack 一些核心概念："></a>Webpack 一些核心概念：</h3><blockquote><p><a href="https://juejin.cn/post/7023242274876162084">【万字】透过分析 webpack 面试题，构建 webpack5.x 知识体系</a></p></blockquote><ul><li><p><code>Entry</code>：入口，指示 Webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。</p></li><li><p><code>Output</code>：输出结果，告诉 Webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。</p></li><li><p><code>Module</code>：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</p></li><li><p><code>Chunk</code>：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</p></li><li><p><code>Loader</code>：模块代码转换器，让 webpack 能够去处理除了 JS、JSON 之外的其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。</p></li><li><p><code>Plugin</code>：扩展插件。在 webpack 运行的生命周期中会广播出许多事件，plugin 可以监听这些事件，在合适的时机通过 webpack 提供的 api 改变输出结果。常见的有：打包优化，资源管理，注入环境变量。</p></li><li><p><code>Mode</code>：模式，告知 webpack 使用相应模式的内置优化</p><hr></li></ul><ul><li><code>hash</code>: 每次构建的生成唯一的一个 hash，且所有的文件 hash 串是一样的</li></ul><ul><li><p><code>chunkhash</code>: 每个<strong>入口文件</strong>都是一个 chunk，每个 chunk 是由入口文件与其依赖所构成，<strong>异步加载</strong>的文件也被视为是一个 chunk, <strong>chunkhash</strong>是由每次编译模块，根据模块及其依赖模块构成 chunk 生成对应的 chunkhash, 这也就表明了<strong>每个 chunk 的 chunkhash 值</strong>都不一样， 也就是说每个 chunk 都是独立开来的，互不影响，每个 chunk 的更新不会影响其他 chunk 的编译构建</p></li><li><p><code>contenthash</code>：由文件内容决定，文件变化 contenthash 才会变化，一般配合 <code>mini-css-extract-plugin</code>插件提取出 css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 把 style-loader替换掉，不要使用 style-loader了</span></span><br><span class="line">            <span class="attr">loader</span>: <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">outputPath</span>: <span class="string">&quot;css/&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;css/[name].[contenthash].css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="提升-webpack-打包速度"><a href="#提升-webpack-打包速度" class="headerlink" title="提升 webpack 打包速度"></a>提升 webpack 打包速度</h3><blockquote><p><a href="https://juejin.cn/post/7046616302521155614">一套骚操作下来，webpack 项目打包速度飞升 🚀、体积骤减 ↓</a></p><p><a href="https://juejin.cn/post/6844904071736852487">玩转 webpack，使你的打包速度提升 90%</a></p><p><a href="https://juejin.cn/post/6844904093463347208">带你深度解锁 Webpack 系列(优化篇)</a></p><p><a href="https://juejin.cn/post/6996816316875161637">学习 Webpack5 之路（优化篇）- 近 7k 字</a></p></blockquote><ul><li><p>速度分析，可以使用 <code>speed-measure-webpack-plugin</code></p></li><li><p>提升基础环境，nodejs 版本，webpack 版本</p></li><li><p><code>CDN</code> 分包 <code>html-webpack-externals-plugin</code>, <code>externals</code></p></li><li><p>多进程、多实例构建 <code>thread-loader</code> <code>happypack(不再维护)</code></p></li><li><p>多进程并行构建打包<code>uglifyjs-webpack-plugin</code> <code>terser-webpack-plugin</code></p></li><li><p>缓存: webpack5 内置了<code>cache</code>模块 、<code>babel-loader</code> 的 <code>cacheDirectory</code> 标志、<code>cache-loader</code>, <code>HardSourceWebpackPlugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack5内置缓存</span></span><br><span class="line">  <span class="attr">cache</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;filesystem&quot;</span>, <span class="comment">// 使用文件缓存</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>构建缩小范围 <code>include</code>,<code>exclude</code></p></li><li><p>加快文件查找速度<code>resolve.alias</code>,<code>resolve.extensions</code>, <code>module.noParse</code></p></li><li><p><code>DllPlugin</code></p></li><li><p><code>babel </code>配置的优化</p></li></ul><h3 id="webpack-常用-loader，plugin"><a href="#webpack-常用-loader，plugin" class="headerlink" title="webpack 常用 loader，plugin"></a>webpack 常用 loader，plugin</h3><p><strong>loader</strong></p><ul><li><code>babel-loader</code> 将 <code>es6</code> 转换成 <code>es5</code> , <code>ts-loader</code>、<code>vue-loader</code></li><li><code>eslint-loader</code> 配置 <code>enforce: &#39;pre&#39;</code> 这个 loader 最先执行</li><li><code>css-loader</code>、<code>style-loader</code>、<code>postcss-loader</code>、<code>less-loader</code>、<code>sass-loader</code></li><li><code>file-loader</code> 把文件转换成路径引入, <code>url-loader</code>（比<code>file-loader</code>多了小于多少的能转换成 base64）</li><li><code>image-loader</code></li><li><code>svg-sprite-loader</code> 处理 svg</li><li><code>thread-loader</code> 开启多进程 ，会在一个单独的 worker 池（worker pool）中运行</li><li><code>cache-loader</code> 缓存一些性能开销比较大的 loader 的处理结果</li></ul><p><strong>plugin</strong></p><ul><li><p><code>html-webpack-plugin</code> 将生成的 css，js 自动注入到 html 文件中，能对 html 文件压缩</p></li><li><p><code>copy-webpack-plugin</code> 拷贝某个目录</p></li><li><p><code>clean-webpack-plugin</code> 清空某个目录</p></li><li><p><code>webpack.HotModuleReplacementPlugin</code> 热重载</p></li><li><p><code>webpack.DefinePlugin</code> 定义全局变量</p></li><li><p><code>mini-css-extract-plugin</code> 提取 CSS 到独立 bundle 文件。 <code>extract-text-webpack-plugin</code></p></li><li><p><code>optimize-css-assets-webpack-plugin</code> 压缩 css webpack5 推荐<code>css-minimizer-webpack-plugin</code></p></li><li><p><code>purgecss-webpack-plugin </code> 会单独提取 CSS 并清除用不到的 CSS（会有问题把有用的 css 删除）</p></li><li><p><code>uglifyjs-webpack-plugin</code> ❌（不推荐） 压缩 js、多进程 <code>parallel: true</code></p></li><li><p><code>terser-webpack-plugin</code> 压缩 js， 可开启多进程压缩、推荐使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">parallel</span>: <span class="literal">true</span>, <span class="comment">// 多进程压缩</span></span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>Happypack</code> ❌（不再维护） 可开启多进程</p></li><li><p><code>HardSourceWebpackPlugin</code> 缓存</p></li><li><p><code>speed-measure-webpack-plugin</code> 打包构建速度分析、查看编译速度</p></li><li><p><code>webpack-bundle-analyzer </code>打包体积分析</p></li><li><p><code>compression-webpack-plugin</code> gzip 压缩</p></li></ul><h3 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h3><blockquote><p><a href="https://juejin.cn/post/6892994632968306702">前端性能优化 24 条建议（2020）</a></p></blockquote><ol><li>减少 http 请求</li><li>使用 http2</li><li>静态资源使用 CDN</li><li>将 CSS 放在文件头部，JavaScript 文件放在底部</li><li>使用字体图标 iconfont 代替图片图标</li><li>设置缓存，强缓存，协商缓存</li><li>压缩文件，css(<code>MiniCssExtractPlugin</code>),js(<code>UglifyPlugin</code>),html(<code>html-webpack-plugin</code>)文件压缩，清除无用的代码，<code>tree-shaking</code>（需要 es6 的 import 才支持），gzip 压缩(<code>compression-webpack-plugin</code>)</li><li>splitChunks 分包配置，optimization.splitChunks 是基于 <a href="https://link.juejin.cn/?target=https://webpack.docschina.org/plugins/split-chunks-plugin/">SplitChunksPlugin</a> 插件实现的</li><li>图片优化、图片压缩</li><li>webpack 按需加载代码，<code>hash</code>，<code>contenthash</code></li><li>减少重排重绘</li><li>降低 css 选择器的复杂性</li></ol><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><blockquote><p><a href="https://juejin.cn/post/6844904008679686152">不容错过的 Babel7 知识</a></p></blockquote><p>核心库 <code>@babel/core</code></p><p><code>Polyfill</code> 垫片</p><p>CLI 命令行工具 <code>@babel/cli</code></p><p>插件</p><p>预设：包含了很多插件的一个组合，<code>@babel/preset-env</code> <code>@babel/preset-react</code> <code>@babel/preset-typescript</code></p><p><strong>polyfill</strong></p><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Map</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p><p>举例来说，ES6 在<code>Array</code>对象上新增了<code>Array.from</code>方法。Babel 就不会转码这个方法。如果想让这个方法运行，可以使用<code>core-js</code>和<code>regenerator-runtime</code>(后者提供 generator 函数的转码)，为当前环境提供一个垫片。</p><p><strong><code>@babel/plugin-transform-runtime</code></strong></p><p><code>Babel</code> 会使用很小的辅助函数来实现类似 <code>_createClass</code> 等公共方法。默认情况下，它将被添加(<code>inject</code>)到需要它的每个文件中。</p><p>如果你有 10 个文件中都使用了这个 <code>class</code>，是不是意味着 <code>_classCallCheck</code>、<code>_defineProperties</code>、<code>_createClass</code> 这些方法被 <code>inject</code> 了 10 次。这显然会导致包体积增大，最关键的是，我们并不需要它 <code>inject</code> 多次。</p><p><code>@babel/plugin-transform-runtime</code> 是一个可以重复使用 <code>Babel</code> 注入的帮助程序，以节省代码大小的插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-transform-runtime</span><br><span class="line">npm install --save @babel/runtime</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>, <span class="comment">// 配置 polyfill 动态导入</span></span><br><span class="line">                <span class="string">&quot;corejs&quot;</span>: <span class="number">3</span> <span class="comment">// core-js@3</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="跨域、同源策略"><a href="#跨域、同源策略" class="headerlink" title="跨域、同源策略"></a>跨域、同源策略</h3><p>参考：<a href="https://blog.csdn.net/weixin_43745075/article/details/115482227">https://blog.csdn.net/weixin_43745075/article/details/115482227</a></p><blockquote><p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210407114820178.png" alt="img"></p><p><strong>同源策略限制内容有：</strong></p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul><p>但是有三个标签是允许跨域加载资源：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;XXX&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;XXX&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;XXX&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><ol><li><p><code>JSONP</code>：通 过 动 态 创 建 <code>script</code> ， 再 请 求 一 个 带 参 网 址 实 现 跨 域 通 信 。</p></li><li><p>开发环境：前端做代理</p></li><li><p><code>nginx</code>反向代理</p></li><li><p><code>CORS</code>: 服务端设置 <code>Access-Control-Allow-Origin</code> 即可，前端无须设置，若要带 <code>cookie</code> 请求，前后端都需要设置。</p></li><li><p><code>websocket</code></p><p>—下面的跨域通信、注意只是页面之间的跨域，不是前后端服务跨域，别人问前后端跨域就不要回答下面的了</p></li><li><p><code>postMessage</code></p></li><li><p>window.name + iframe</p></li><li><p>document.domain + iframe</p></li><li><p>location.hash + iframe</p></li></ol><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><ul><li>标记清除： 进入环境、离开环境</li><li>引用计数（不常用）：值被引用的次数， 当引用次数为零时会被清除（缺陷，相互引用的会有问题）</li></ul><h3 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h3><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><blockquote><p>如果命中强缓存–就不用像服务器去请求</p></blockquote><ol><li><p><code>Expires</code> 设置时间，过期时间 <code>expires: Tue, 15 Oct 2019 13:30:54 GMT</code></p><p>通过本地时间和 expires 比较是否过期，如果过期了就去服务器请求，没有过期的话就直接使用本地的</p><p>缺点：本地时间可能会更改， 导致缓存出错</p></li><li><p><code>Cache-Control</code> HTTP1.1 中新增的</p><ul><li><p>max-age 最大缓存多少毫秒，列如 <code>Cache-Control: max-age=2592000</code></p></li><li><p>no-store (每次都要请求，就连协商缓存都不走)表示不进行缓存，缓存中不得存储任何关于客户端请求和服务端响应的内容。每次 由客户端发起的请求都会下载完整的响应内容。<code>Cache-Control: no-store</code></p></li><li><p>no-cache（默认值）表示不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源，也许称 为 do-notserve-from-cache-without-revalidation 更合适。浏览器默认开启的是 no-cache，其 实这里也可理解为开启协商缓存</p></li><li><p>public 和 private</p><p>public 与 private 是针对资源是否能够被代理服务缓存而存在的一组对立概念</p><p>当我们为资源设置了 pubile，那么它既可以被浏览器缓存也可被代理服务器缓存。设置为</p><p>private 的时候，则该资源只能被浏览器缓存，其中默认值是 private。</p></li><li><p>max-age 和 s-maxage</p><p>s-maxage 只适用于供多用户使用的公共服务器上(如 CND cache)，并只对 public 缓存有效</p></li></ul></li></ol><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><blockquote><p>需要向服务器请求，如果没有过期，服务器会返回 304，</p></blockquote><ol><li><strong>ETag 和 If-None-Match 唯一标识</strong></li></ol><ul><li><p>服务器响应 ETag 值，浏览器携带的是 If-None-Match（携带的是上一次响应的 ETag），服务拿到这 If-None-Match 值后判断过期–&gt; 没有过期 304，并且返回 ETag</p><hr><p>二者的值都是服务器为每份资源分配的唯一标识字符串。</p><p>• 浏览器请求资源，服务器会在响应报文头中加入 ETag 字段。资源更新的时候，服务端的</p><p>ETag 值也随之更新</p><p>• 浏览器再次请求资源，会在请求报文头中添加 If-None-Match 字段，它的值就是上次响应</p><p>报文中的 ETag 值，服务器会对比 ETag 和 If-None-Match 的值是否一致。如果不一致，服务</p><p>器则接受请求，返回更新后的资源，状态码返回 200；如果一致，表明资源未更新，则返回</p><p>状态码 304，可继续使用本地缓存，值得注意的是此时响应头会加上 ETag 字段，即使它没</p><p>有变化</p><hr></li><li><p><strong>Last-Modified 和 If-Modified-Since 时间戳</strong><br>缺点： 某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1s 内修改了 N 次)，</p><p>If-Modified-Since 可查到的是秒级，这种修改无法判断</p></li></ul><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>四部曲</p><ol><li>创建<code>AO</code>对象</li><li>找形参和变量声明，将变量和形参名作为<code>AO</code>的属性名，值为<code>undefined</code></li><li>将实参值和形参值相统一</li><li>在函数体里面找到函数声明，值赋予函数体</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预编译</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">test <span class="comment">/* 形参 */</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; test: &quot;</span>, test); <span class="comment">// function()&#123;&#125;</span></span><br><span class="line">  <span class="keyword">var</span> test = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;bs&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; test: &quot;</span>, test); <span class="comment">// 2</span></span><br><span class="line">  <span class="comment">// 函数声明</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 函数表达式</span></span><br><span class="line">  str = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; test: &quot;</span>, test); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预编译 四部曲</span></span><br><span class="line"><span class="comment">// 1. 创建AO对象</span></span><br><span class="line"><span class="comment">// 2. 找形参和变量声明，将变量和形参名作为AO的属性名，值为undefined</span></span><br><span class="line"><span class="comment">// 3. 将实参值和形参值相统一</span></span><br><span class="line"><span class="comment">// 4. 在函数体里面找到函数声明，值赋予函数体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AO &#123;</span></span><br><span class="line"><span class="comment">//   test: undefined</span></span><br><span class="line"><span class="comment">//   str: undefined</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// AO &#123;</span></span><br><span class="line"><span class="comment">//   test: 1</span></span><br><span class="line"><span class="comment">//   str: undefined</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// AO &#123;</span></span><br><span class="line"><span class="comment">//   test: 1</span></span><br><span class="line"><span class="comment">//   str: function() &#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span> <span class="comment">/*实参*/</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;222&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; a, b, c: &quot;</span>, a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AO &#123;</span></span><br><span class="line"><span class="comment">//   a : &#x27;222&#x27;,</span></span><br><span class="line"><span class="comment">//   b : function() &#123;&#125;,</span></span><br><span class="line"><span class="comment">//   c : 3</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">22</span>;</span><br><span class="line"><span class="comment">// let a = 22</span></span><br><span class="line"><span class="comment">// window.a ==&gt; 22</span></span><br></pre></td></tr></table></figure><p>全局</p><ol><li>创建 GO 对象&#x3D;&#x3D;window</li><li>变量声明，将变量作为 GO 的属性名，值为<code>undefined</code></li><li>找到函数声明，值赋予函数体</li></ol><h3 id="event-loop-事件循环"><a href="#event-loop-事件循环" class="headerlink" title="event-loop(事件循环)"></a>event-loop(事件循环)</h3><blockquote><p><a href="https://juejin.cn/post/6844903764202094606">一次弄懂 Event Loop（彻底解决此类面试问题）</a></p></blockquote><p><code>JS</code>是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，<code>Promise.then</code>，<code>MutationObserver</code>，宏任务的话就是<code>setImmediate setTimeout setInterval</code></p><p><strong>MacroTask（宏任务）*</strong></p><ul><li><code>script</code>全部代码、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>（浏览器暂时不支持，只有 IE10 支持，具体可见<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setImmediate"><code>MDN</code></a>）、<code>I/O</code>、<code>UI Rendering</code>。</li></ul><p><strong>MicroTask（微任务）</strong></p><ul><li><code>Process.nextTick（Node独有）</code>、<code>Promise.then</code>、<code>Object.observe(废弃)</code>、<code>MutationObserver</code></li></ul><h4 id="浏览器中"><a href="#浏览器中" class="headerlink" title="浏览器中"></a>浏览器中</h4><blockquote><p>执行完一个宏任务，会执行所有的微任务</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/608a4edf58d141c88e75262938c3ac66.gif" alt="在这里插入图片描述"></p><h4 id="nodejs-中"><a href="#nodejs-中" class="headerlink" title="nodejs 中"></a>nodejs 中</h4><blockquote><p>在 11 之前的版本，会在每个阶段之后执行所有的微任务</p><p>在 11 版本及之后，会每执行完一个宏任务，就会清空所用的微任务（和浏览器保存一致）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new Promise 1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new Promise then&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1 new Promise&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1 new Promise then&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1 Promise then&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2 Promise then&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start end&quot;</span>);</span><br></pre></td></tr></table></figure><p>在 node11 版本之前（不包含 11）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new Promise 1</span><br><span class="line">start end</span><br><span class="line">new Promise then</span><br><span class="line">timer1</span><br><span class="line">timer1 new Promise</span><br><span class="line">timer2</span><br><span class="line">timer1 new Promise then</span><br><span class="line">timer1 Promise then</span><br><span class="line">timer2 Promise then</span><br></pre></td></tr></table></figure><p>在 node11 版本及之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new Promise 1</span><br><span class="line">start end</span><br><span class="line">new Promise then</span><br><span class="line">timer1</span><br><span class="line">timer1 new Promise</span><br><span class="line">timer1 new Promise then</span><br><span class="line">timer1 Promise then</span><br><span class="line">timer2</span><br><span class="line">timer2 Promise then</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b222442fa0904f0d956565597e1fab17~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><code>Node</code>的<code>Event loop</code>一共分为 6 个阶段，每个细节具体如下：</p><ol><li><code>timers</code>: 执行<code>setTimeout</code>和<code>setInterval</code>中到期的<code>callback</code>。</li><li><code>pending callback</code>: 上一轮循环中少数的<code>callback</code>会放在这一阶段执行。</li><li><code>idle, prepare</code>: 仅在内部使用。</li><li><code>poll</code>: 最重要的阶段，执行<code>pending callback</code>，在适当的情况下回阻塞在这个阶段。</li><li><code>check</code>: 执行<code>setImmediate</code>(<code>setImmediate()</code>是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行<code>setImmediate</code>指定的回调函数)的<code>callback</code>。</li><li><code>close callbacks</code>: 执行<code>close</code>事件的<code>callback</code>，例如<code>socket.on(&#39;close&#39;[,fn])</code>或者<code>http.server.on(&#39;close, fn)</code>。</li></ol><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a><strong>常见状态码</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1xx: 接受，继续处理 </span><br><span class="line">200: 成功，并返回数据 </span><br><span class="line">201: 已创建 </span><br><span class="line">202: 已接受 </span><br><span class="line">203: 成为，但未授权 </span><br><span class="line">204: 成功，无内容 </span><br><span class="line">205: 成功，重置内容 </span><br><span class="line">206: 成功，部分内容 </span><br><span class="line">301: 永久移动，重定向 </span><br><span class="line">302: 临时移动，可使用原有 URI </span><br><span class="line">304: 资源未修改，可使用缓存 </span><br><span class="line">305: 需代理访问 </span><br><span class="line">400: 请求语法错误 </span><br><span class="line">401: 要求身份认证 </span><br><span class="line">403: 拒绝请求 </span><br><span class="line">404: 资源不存在 </span><br><span class="line">500: 服务器错误</span><br></pre></td></tr></table></figure><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><blockquote><p><a href="https://juejin.cn/post/6844903958624878606">面试官，不要再问我三次握手和四次挥手</a></p></blockquote><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a><strong>三次握手</strong></h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/8/16da9fd28a45bd19~tplv-t2oaga2asx-watermark.awebp" alt="三次握手.png"></p><p><strong>为什么需要三次握手，两次不可以吗</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">为了防止失效的连接请求又传送到主机，因而产生错误。</span><br><span class="line">如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请</span><br><span class="line">求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于 TCP 的客</span><br><span class="line">户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条</span><br><span class="line">报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。</span><br><span class="line">此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失</span><br><span class="line">效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不</span><br><span class="line">必要的错误和资源的浪费。</span><br><span class="line"></span><br><span class="line">如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了</span><br><span class="line">那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器</span><br><span class="line">收不到确认，就知道客户端并没有请求连接。</span><br></pre></td></tr></table></figure><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/8/16da9fd28b49f652~tplv-t2oaga2asx-watermark.awebp" alt="image.png"></p><p><strong>挥手为什么需要四次？</strong></p><p>因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中<strong>ACK 报文是用来应答的，SYN 报文是用来同步的</strong>。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，”你发的 FIN 报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。故需要四次挥手。</p><p><strong><code>2MSL</code>等待状态</strong></p><p>TIME_WAIT 状态也成为<code>2MSL</code>等待状态。每个具体 TCP 实现必须选择一个报文段最大生存时间 MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为 TCP 报文段以 IP 数据报在网络内传输，而 IP 数据报则有限制其生存时间的 TTL 字段。</p><p>对一个具体实现所给定的 MSL 值，处理的原则是：当 TCP 执行一个主动关闭，并发回最后一个 ACK，该连接必须在 TIME_WAIT 状态停留的时间为 2 倍的 MSL。这样可让 TCP 再次发送最后的 ACK 以防这个 ACK 丢失（另一端超时并重发最后的 FIN）。</p><p>这种 2MSL 等待的另一个结果是这个 TCP 连接在 2MSL 等待期间，定义这个连接的插口（客户的 IP 地址和端口号，服务器的 IP 地址和端口号）不能再被使用。这个连接只能在 2MSL 结束后才能再被使用。</p><h3 id="HTTP-版本"><a href="#HTTP-版本" class="headerlink" title="HTTP 版本"></a>HTTP <strong>版本</strong></h3><p>HTTP&#x2F;1.0 </p><p>最早的 http 只是使用一些简单的网页上和网络请求上，每次请求都打开一个新的 TCP 连接， 收到响应后立即断开连接 </p><p>HTTP&#x2F;1.1<br>缓存处理，HTTP&#x2F;1.1 更多的引入了缓存策略，如 Cache-Control，Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等 </p><p>宽带优化及网络连接的使用，在 HTTP&#x2F;1.0 中，存在一些浪费宽带的现象，列如客户端只需要某个对象的一部分，而服务器把整个对象都送过来了，并且不支持断点续传，HTTP1.1 则 </p><p>在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（PartialContent），这样就方便了开发者自由的选择以便于充分利用带宽和连接。 </p><p>错误通知的管理，在 HTTP&#x2F;1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。 </p><p>Host 头处理，在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中 </p><p>的 URL 并没有传递主机名。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多 </p><p>个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request） </p><p>长连接， HTTP&#x2F;1.1 默认开启持久连接（默认：keep-alive），在一个 TCP 连接上可以传递多 </p><p>个 HTTP 请求和响应，减少了建立与关闭连接的消耗和延迟 </p><p>HTTP&#x2F;2.0 </p><p>在 HTTP&#x2F;2.0 中，有两个重要的概念，分别是帧（frame） 和 流（stream），帧代表数据传输 </p><p>的最小单位，每个帧都有序列标识标明该帧属于哪个流，流也就是多个帧组成的数据流，每 </p><p>个流表示一个请求。 </p><p>新的二进制格式： HTTP&#x2F;1.x 的解析是基于文本的。基于文本协议的格式解析存在天然缺陷， </p><p>文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 </p><p>的组合。基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮。 </p><p>多路复用： HTTP&#x2F;2.0 支持多路复用，这是 HTTP&#x2F;1.1 持久连接的升级版。多路复用，就是在 </p><p>一个 TCP 连接中存在多个条流，也就是多个请求，服务器则可以通过帧中的标识知道该帧属 </p><p>于哪个流（即请求），通过重新排序还原请求。多路复用允许并发多个请求，每个请求及该 </p><p>请求的响应不需要等待其他的请求或响应，避免了线头阻塞问题。这样某个请求任务耗时严 </p><p>重，不会影响到其它连接的正常执行,极大的提高传输性能。 </p><p>头部压缩： 对前面提到的 HTTP&#x2F;1.x 的 header 带有大量信息，而且每次都要重复发送， </p><p>HTTP&#x2F;2.0 使用 encoder 来减少需要传输的头部大小，通讯双方各自 cache 一份头部 fields 表， </p><p>既避免了重复头部的传输，又减小了需要传输的大小。 </p><p>服务端推送： 服务端推送指把客户端所需要的 css&#x2F;js&#x2F;img 资源伴随着 index.html 一起发送 </p><p>到客户端，省去了客户端重复请求的步骤（从缓存中取）。正因为没有发起请求，建立连接 </p><p>等操作，所以静态资源通过服务端推送的方式极大的提升了速度HTTP&#x2F;3.0 </p><p>HTTP&#x2F;2.0 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中 </p><p>出现了丢包的情况，会导致整个 TCP 都要开始等待重传，也就导致了后面所有的数据都阻塞了。</p><p>避免包阻塞： 多个流的数据包在 TCP 连接上传输时，若一个流中的数据包传输出现问题， </p><p>TCP 需要等待该包重传后，才能继续传输其它流的数据包。但在基于 UDP 的 QUIC 协议中， </p><p>不同的流之间的数据传输真正实现了相互独立互不干扰，某个流的数据包在出问题需要重传 </p><p>时，并不会对其他流的数据包传输产生影响。 </p><p>快速重启会话: 普通基于 tcp 的连接，是基于两端的 ip 和端口和协议来建立的。在网络切换 </p><p>场景，例如手机端切换了无线网，使用 4G 网络，会改变本身的 ip，这就导致 tcp 连接必须 </p><p>重新创建。而 QUIC 协议使用特有的 UUID 来标记每一次连接，在网络环境发生变化的时候， </p><p>只要 UUID 不变，就能不需要握手，继续传输数据。 </p><p>HTTP2.0 的多路复用和 HTTP1.X 中的长连接有什么区别？ </p><p>HTTP&#x2F;1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接； </p><p>HTTP&#x2F;1.1 在一个 TCP 连接上可以传递多个 HTTP 请求和响应，后面的请求等待前面的请求返 </p><p>回才能获得执行机会，一旦有某个请求超时，后续请求只能被阻塞，毫无办法，也就是常说 </p><p>的线头阻塞 </p><p>HTTP&#x2F;2.0 多个请求可同时在一个连接上并行执行.某个请求任务耗时严重，不影响其他连接 </p><p>的正常执行。 </p><h3 id="https-http-ssl-x2F-tls"><a href="#https-http-ssl-x2F-tls" class="headerlink" title="https(http + ssl&#x2F;tls)"></a>https(http + ssl&#x2F;tls)</h3><p>http: 最广泛网络协议，BS 模型，浏览器高效。</p><p>https: 安全版，通过 SSL 加密，加密传输，身份认证，密钥</p><p>1 https 相对于 http 加入了 ssl 层, 加密传输, 身份认证;</p><p>2 需要到 ca 申请收费的证书;</p><p>3 安全但是耗时多，缓存不是很好;</p><p>4 注意兼容 http 和 https;</p><p>5 连接方式不同, 端口号也不同, http 是 80, https 是 443</p><ul><li><p>明文： 普通的文本</p></li><li><p>密钥：把明文加密的那个钥匙</p></li><li><p>密文： 把明文加密</p><p>明文+密钥&#x3D;&#x3D;&gt;密文&#x3D;&#x3D;&gt;密钥&#x3D;&#x3D;解密&#x3D;&gt;明文</p></li><li><p>对称加密 解密的 key（密钥）和解密的 key 是同一个 3 + 1</p></li><li><p>非对称加密 私钥和公钥</p></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/489428dbcc4840d689ed717d4335a833~tplv-k3u1fbpfcp-watermark.image" alt="无标题.png"></p><h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><blockquote><p><a href="https://juejin.cn/post/7031322059414175774">10 个常见的前端手写功能，你全都会吗</a></p></blockquote><p>最近面试 2022 年 3 月问到了很多手写，这个一定要准备下</p><h3 id="防抖-1"><a href="#防抖-1" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">    <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">const</span> callNow = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流-1"><a href="#节流-1" class="headerlink" title="节流"></a>节流</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt;= wait) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      pre = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="event-bus-事件总线-发布订阅模式"><a href="#event-bus-事件总线-发布订阅模式" class="headerlink" title="event bus 事件总线 | 发布订阅模式"></a>event bus 事件总线 | 发布订阅模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event bus</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">name, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; events &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!events[name]) &#123;</span><br><span class="line">      events[name] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    events[name].<span class="title function_">push</span>(callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">name, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> handlers = <span class="variable language_">this</span>.<span class="property">events</span>[name];</span><br><span class="line">    handlers &amp;&amp;</span><br><span class="line">      handlers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">off</span>(<span class="params">name, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; events &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (!events[name]) <span class="keyword">return</span>;</span><br><span class="line">    events[name] = events[name].<span class="title function_">filter</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn !== callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">once</span>(<span class="params">name, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(name, handler);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(name, handler);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据偏平化"><a href="#数据偏平化" class="headerlink" title="数据偏平化"></a>数据偏平化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据偏平化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatter</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(curr) ? [...prev, ...<span class="title function_">flatter</span>(curr)] : [...prev, curr];</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写-new"><a href="#手写-new" class="headerlink" title="手写 new"></a>手写 new</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写 new</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">ctr, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(ctr.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  myNew.<span class="property">target</span> = ctr;</span><br><span class="line">  <span class="keyword">const</span> result = ctr.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    result &amp;&amp;</span><br><span class="line">    (<span class="keyword">typeof</span> result === <span class="string">&quot;function&quot;</span> || <span class="keyword">typeof</span> result === <span class="string">&quot;function&quot;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="call、bind"><a href="#call、bind" class="headerlink" title="call、bind"></a>call、bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line">  context[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = context[fn](...args);</span><br><span class="line">  <span class="keyword">delete</span> context[fn];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind实现要复杂一点  因为他考虑的情况比较多 还要涉及到参数合并(类似函数柯里化)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!context || context === <span class="literal">null</span>) &#123;</span><br><span class="line">    context = <span class="variable language_">window</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创造唯一的key值  作为我们构造的context内部方法名</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>();</span><br><span class="line">  context[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">//  bind情况要复杂一点</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">function</span> (<span class="params">...innerArgs</span>) &#123;</span><br><span class="line">    <span class="comment">// 第一种情况 :若是将 bind 绑定之后的函数当作构造函数，通过 new 操作符使用，则不绑定传入的 this，而是将 this 指向实例化出来的对象</span></span><br><span class="line">    <span class="comment">// 此时由于new操作符作用  this指向result实例对象  而result又继承自传入的_this 根据原型链知识可得出以下结论</span></span><br><span class="line">    <span class="comment">// this.__proto__ === result.prototype   //this instanceof result =&gt;true</span></span><br><span class="line">    <span class="comment">// this.__proto__.__proto__ === result.prototype.__proto__ === _this.prototype; //this instanceof _this =&gt;true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> _this === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 此时this指向指向result的实例  这时候不需要改变this指向</span></span><br><span class="line">      <span class="variable language_">this</span>[fn] = _this;</span><br><span class="line">      <span class="variable language_">this</span>[fn](...[...args, ...innerArgs]); <span class="comment">//这里使用es6的方法让bind支持参数合并</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果只是作为普通函数调用  那就很简单了 直接改变this指向为传入的context</span></span><br><span class="line">      context[fn](...[...args, ...innerArgs]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 如果绑定的是构造函数 那么需要继承构造函数原型属性和方法</span></span><br><span class="line">  <span class="comment">// 实现继承的方式: 使用Object.create</span></span><br><span class="line">  result.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="异步控制并发数"><a href="#异步控制并发数" class="headerlink" title="异步控制并发数"></a>异步控制并发数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">limitRequest</span>(<span class="params">requests, limit = <span class="number">3</span></span>) &#123;</span><br><span class="line">  requests = requests.<span class="title function_">slice</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> len = requests.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span> (limit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">start</span>();</span><br><span class="line">      limit--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> promiseFn = requests.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">      promiseFn?.().<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        count++; <span class="comment">// 一定要通过 count 判断、不能通过 requests.length 判断是否为空，这样不对的</span></span><br><span class="line">        <span class="keyword">if</span> (count === len) &#123;</span><br><span class="line">          <span class="comment">// 最后一个</span></span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">start</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="string">&quot;12345&quot;</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="function">() =&gt;</span> <span class="title function_">fetch</span>(<span class="string">`https://www.baidu.com/s?ie=UTF-8&amp;wd=<span class="subst">$&#123;value&#125;</span>`</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">limitRequest</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="算法-x2F-特殊题目"><a href="#算法-x2F-特殊题目" class="headerlink" title="算法&#x2F;特殊题目"></a>算法&#x2F;特殊题目</h2><p>最近面试 2022 年 3 月问到了很多手写，这个一定要准备下、下面都是我被问到的</p><h3 id="台阶问题"><a href="#台阶问题" class="headerlink" title="台阶问题"></a>台阶问题</h3><p>有 N 个台阶，一步可以走一梯或者两梯，请问有多少种走法</p><p>解答：<a href="https://blog.csdn.net/z1832729975/article/details/123836190">https://blog.csdn.net/z1832729975/article/details/123836190</a></p><h3 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h3><blockquote><p>我面试才几家，这个有两家都问到了 <a href="https://leetcode-cn.com/problems/valid-parentheses/">力扣原题</a></p></blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>实现</strong></p><p>我们可以通过栈来实现、当遇到左括号的时候就把对应的右括号值<code>push</code>到栈中，否则的话我们就把栈定的元素<code>pop</code>和当前字符比较是否相等，不相信的话直接返回 <code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> leftFlags = &#123;</span><br><span class="line">    <span class="string">&quot;(&quot;</span>: <span class="string">&quot;)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#123;&quot;</span>: <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[&quot;</span>: <span class="string">&quot;]&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> chart <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">const</span> flag = leftFlags[chart];</span><br><span class="line">    <span class="comment">// 是左括号</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      stack.<span class="title function_">push</span>(flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是右括号</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (chart !== stack.<span class="title function_">pop</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="现在时间-07-15，请问分针和时针的夹角是多少"><a href="#现在时间-07-15，请问分针和时针的夹角是多少" class="headerlink" title="现在时间 07:15，请问分针和时针的夹角是多少"></a>现在时间 07:15，请问分针和时针的夹角是多少</h3><p>先看看时钟，要了解 07:15 在哪，这个不知道在哪就尴尬了</p><p><img src="https://img-blog.csdnimg.cn/833a03cad6e346789184fbe5643ec241.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemjpmL_po54=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>画图，结果如下</p><p>7 点 15 分时针和分针所形成的角是</p><p>120 + 30*1&#x2F;4&#x3D;127.5</p><p>这题需要注意时针还好继续走，不会固定，不然容易被坑</p><p><img src="D:/学习/面试相关/images/前端面试题整理/image-20220331153206674.png" alt="image-20220331153206674"></p><h3 id="写-IP-地址的正则表达式"><a href="#写-IP-地址的正则表达式" class="headerlink" title="写 IP 地址的正则表达式"></a>写 IP 地址的正则表达式</h3><p>分析<code>ip</code>地址</p><h3 id="让-a-1-amp-amp-a-2-amp-amp-a-3-为-true"><a href="#让-a-1-amp-amp-a-2-amp-amp-a-3-为-true" class="headerlink" title="让 a==1 &amp;&amp; a==2 &amp;&amp; a==3 为 true"></a>让 <code>a==1 &amp;&amp; a==2 &amp;&amp; a==3</code> 为 <code>true</code></h3><blockquote><p>因为这个是 &#x3D;&#x3D;, 会存在隐式类型转换</p></blockquote><ul><li><p>利用对象</p><p><code>Symbol.toString</code></p><p><code>valueOf</code></p><p><code>toString</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 这三种方法都可以，优先级也是这个顺序</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toString</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">value</span>++;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// valueOf() &#123;</span></span><br><span class="line">  <span class="comment">//   return a.value++</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// toString() &#123;</span></span><br><span class="line">  <span class="comment">//   return a.value++</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>利用数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">valueOf</span> = a.<span class="property">shift</span>;</span><br><span class="line"><span class="comment">// 一样有</span></span><br><span class="line"><span class="comment">//a[Symbol.toPrimitive] = a.shift</span></span><br><span class="line"><span class="comment">//a.toString = a.shift</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>Object.defineProperty</code>拦截</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>通过 Proxy 拦截</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value++;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><blockquote><p>建议先把基础的东西学会，推荐看这篇文章、基础的学会，就能应付大多数的 typescript 面试了</p><p><a href="https://juejin.cn/post/7018805943710253086">2021 typescript 史上最强学习入门文章(2w 字)</a></p></blockquote><h3 id="const和readonly的区别"><a href="#const和readonly的区别" class="headerlink" title="const和readonly的区别"></a><code>const</code>和<code>readonly</code>的区别</h3><p><code>const</code>常量：表示这个变量的指针地址不可以在改变，可以更改对象内部的属性</p><p><code>readonly</code>只读：指针地址不可以改变，并且对象内部的属性也不可以改变</p><ol><li>const 用于变量，readonly 用于属性</li><li>const 在运行时检查，readonly 在编译时检查</li><li>使用 const 变量保存的数组，可以使用 push，pop 等方法。但是如果使用<code>ReadonlyArray</code>声明的数组不能使用 push，pop 等方法。</li></ol><h3 id="type和interface的区别"><a href="#type和interface的区别" class="headerlink" title="type和interface的区别"></a><code>type</code>和<code>interface</code>的区别</h3><p>参考：<a href="https://juejin.cn/post/7018805943710253086#heading-63">https://juejin.cn/post/7018805943710253086#heading-63</a></p><p>type-类型别名</p><p>interface-接口</p><ol start="2"><li><p>接口重名会合并、类型别名重名会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个接口合并，变成下面的</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Aanimal</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Aanimal</span> = &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;; <span class="comment">// 会报错、重名了</span></span><br></pre></td></tr></table></figure></li><li><p>两者都可以用来描述对象或函数的类型，但是语法不同</p><p>interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SetPoint</span> &#123;</span><br><span class="line">  (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>type</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetPoint</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure></li><li><p>类型别名可以为任何类型引入名称。例如基本类型，联合类型等</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// primitive</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPointX</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPointY</span> = &#123; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// union</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPoint</span> = <span class="title class_">PartialPointX</span> | <span class="title class_">PartialPointY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Data</span> = [<span class="built_in">number</span>, <span class="built_in">string</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// dom</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">type</span> B = <span class="keyword">typeof</span> div;</span><br></pre></td></tr></table></figure></li><li><p>扩展</p><p>两者的扩展方式不同，但并不互斥。接口可以扩展类型别名，同理，类型别名也可以扩展接口。</p><p>接口的扩展就是继承，通过 <code>extends</code> 来实现。类型别名的扩展就是交叉类型，通过 <code>&amp;</code> 来实现。</p><p>接口扩展接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointX</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> <span class="keyword">extends</span> <span class="title class_">PointX</span> &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>类型别名扩展类型别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointX</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = <span class="title class_">PointX</span> &amp; &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接口扩展类型别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointX</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> <span class="keyword">extends</span> <span class="title class_">PointX</span> &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名扩展接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointX</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = <span class="title class_">PointX</span> &amp; &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="keyof-和-typeof-关键字的作用？"><a href="#keyof-和-typeof-关键字的作用？" class="headerlink" title="keyof 和 typeof 关键字的作用？"></a><strong>keyof 和 typeof 关键字的作用？</strong></h3><blockquote><p><code>keyof 索引类型查询操作符</code> 获取索引类型的属性名，构成联合类型。<br><code>typeof</code> 获取一个变量或对象的类型。</p></blockquote><h3 id="unknown-any-的区别"><a href="#unknown-any-的区别" class="headerlink" title="unknown, any 的区别"></a>unknown, any 的区别</h3><blockquote><p>unknown 类型和 any 类型类似。与 any 类型不同的是。unknown 类型可以接受任意类型赋值，但是 unknown 类型赋值给其他类型前，必须被断言</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas太阳系旋转动画</title>
      <link href="/2023/04/01/canvas-tai-yang-xi-xuan-zhuan-dong-hua/"/>
      <url>/2023/04/01/canvas-tai-yang-xi-xuan-zhuan-dong-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h2><p>Canvas提供了非常多的JavaScript绘图API（比如：绘制路径、矩形、圆、文本和图像等方法），与元素可以绘制 各种2D图形。</p><h3 id="绘制矩形-Rectangle"><a href="#绘制矩形-Rectangle" class="headerlink" title="绘制矩形( Rectangle )"></a>绘制矩形( Rectangle )</h3><p>◼ Canvas支持两种方式来绘制矩形：矩形方法 和 路径方法。 </p><p> 路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。 </p><p> 除了矩形，其他的图形都是通过一条或者多条路径组合而成的。 </p><p> 通常我们会通过众多的路径来绘制复杂的图形。 </p><p>◼ Canvas 绘图的矩形方法： </p><p> fillRect(x, y, width, height)： 绘制一个填充的矩形 </p><p> strokeRect(x, y, width, height)： 绘制一个矩形的边框  clearRect(x, y, width, height)： 清除指定矩形区域，让清除部分完全透明。 </p><p>◼ 方法参数： </p><p> 上面的方法都包含了相同的参数。 </p><p> x 与 y 指定了在canvas画布上所绘制矩形的左上角（相对于原点）的坐标（不支持 undefined ）。 </p><p> width 和 height 设置矩形的尺寸。 绘制矩形( Rectangle ) coderwhy </p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>◼ 什么是路径？ </p><p> 图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。 </p><p> 路径是可由很多子路径构成，这些子路径都是在一个列表中，列表中所有子路径（线、弧形等）将构成图形。 </p><p> 一个路径，甚至一个子路径，通常都是闭合的。 </p><p>◼ 使用路径绘制图形的步骤： </p><p> 1.首先需要创建路径起始点（beginPath）。 </p><p> 2.然后使用画图命令去画出路径( arc 、lineTo )。 </p><p> 3.之后把路径闭合( closePath , 不是必须)。 </p><p> 4.一旦路径生成，就能通过描边(stroke)或填充路径区域(fill)来渲染图形。 </p><p>◼ 以下是绘制路径时，所要用到的函数 </p><p> beginPath()：新建一条路径，生成之后，图形绘制命令被指向到新的路径上绘图，不会关联到旧的路径。 </p><p> closePath()：闭合路径之后图形绘制命令又重新指向到 beginPath之前的上下文中。 </p><p> stroke()：通过线条来绘制图形轮廓&#x2F;描边（针对当前路径图形）。 </p><p> fill()：通过填充路径的内容区域生成实心的图形（针对当前路径图形）。 </p><h3 id="路径-绘制直线"><a href="#路径-绘制直线" class="headerlink" title="路径-绘制直线"></a>路径-绘制直线</h3><p>◼ 移动画笔（moveTo）方法 </p><p> moveTo 方法是不能画出任何东西，但是它也是路径列表的一部分 </p><p> moveTo 可以想象为在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。 </p><p> moveTo(x, y)： 将笔移动到指定的坐标 x 、 y 上。 </p><p> 当 canvas 初始化或者beginPath()调用后，我们通常会使用moveTo(x, y)函数设置起点。 </p><p> 使用moveTo函数能够绘制一些不连续的路径。 </p><p>◼ 绘制直线（lineTo）方法 </p><p> lineTo(x, y)： 绘制一条从当前位置到指定 (x ，y)位置的直线。 ✓ 该方法有两个参数(x ， y)代表坐标系中直线结束的点。 ✓ 开始点和之前的绘制路径有关，之前路径的结束点就是接下来的开始点。 ✓ 当然开始点也可以通过moveTo(x, y)函数改变。 </p><p>◼ 绘制一条直线 </p><p> 第一步：调用 beginPath() 来生成路径。本质上，路径是由很多子路径（线、弧形、等）构成。 </p><p> 第二步：调用moveTo、lineTo函数来绘制路径（路径可以是连续也可以不连续）。 </p><p> 第三步：闭合路径 closePath()，虽然不是必需的，但是通常都是要闭合路径。 </p><p> 第四步：调用stroke()函数来给直线描边。</p><h3 id="路径-绘制三角形-Triangle"><a href="#路径-绘制三角形-Triangle" class="headerlink" title="路径-绘制三角形( Triangle )"></a>路径-绘制三角形( Triangle )</h3><p>◼ 绘制一个三角形步骤 </p><p> 第一步：调用 beginPath() 来生成路径。 </p><p> 第二步：调用moveTo()、lineTo()函数来绘制路径。 </p><p> 第三步：闭合路径 closePath()，不是必需的。 ✓ closePath() 方法会通过绘制一条从当前点到开始点的直线来闭合图形。 ✓ 如果图形是已经闭合了的，即当前点为开始点，该函数什么也不做。 </p><p> 第四步：调用stroke()函数来给线描边，或者调用fill()函数来填充（使用填充 fill 时，路径会自动闭合，而 stroke 不会）。 </p><h3 id="路径-绘制圆弧（Arc）、圆-Circle"><a href="#路径-绘制圆弧（Arc）、圆-Circle" class="headerlink" title="路径-绘制圆弧（Arc）、圆 ( Circle)"></a>路径-绘制圆弧（Arc）、圆 ( Circle)</h3><p>◼ 绘制圆弧或者圆，使用arc()方法。 </p><p> arc(x, y, radius, startAngle, endAngle, anticlockwise)，该方法有六个参数： </p><p>✓ x、y：为绘制圆弧所在圆上的圆心坐标。 </p><p>✓ radius：为圆弧半径。 </p><p>✓ startAngle、endAngle：该参数用弧度定义了开始以及结束的弧度。这些都是以 x 轴为基准。 </p><p>✓ anticlockwise：为一个布尔值。为 true ，是逆时针方向，为false，是顺时针方向，默认为false。 </p><p>◼ 计算弧度  arc() 函数中表示角的单位是弧度，不是角度。 </p><p> 角度与弧度的 JS 表达式：弧度&#x3D;( Math.PI &#x2F; 180 ) * 角度 ，即 1角度&#x3D; Math.PI &#x2F; 180 个弧度 ✓ 比如：旋转90°：Math.PI &#x2F; 2； 旋转180°：Math.PI ； 旋转360°：Math.PI * 2； 旋转-90°：-Math.PI &#x2F; 2； </p><p>◼ 绘制一个圆弧的步骤 </p><p> 第一步：调用 beginPath() 来生成路径。 </p><p> 第二步：调用arc()函数来绘制圆弧。 </p><p> 第三步：闭合路径 closePath()，不是必需的。 </p><p> 第四步：调用stroke()函数来描边，或者调用fill()函数来填充（使用填充 fill 时，路径会自动闭合）。 </p><h3 id="路径-矩形（Rectangle）"><a href="#路径-矩形（Rectangle）" class="headerlink" title="路径-矩形（Rectangle）"></a>路径-矩形（Rectangle）</h3><p>◼ 绘制矩形的另一个方法： </p><p> 调用rect() 函数绘制，即将一个矩形路径增加到当前路径上 </p><p> rect(x, y, width, height) </p><p>✓ 绘制一个左上角坐标为（x,y），宽高为 width 以及 height 的矩形。 </p><p>◼ 注意： </p><p> 当该方法执行的时候，moveTo(x, y) 方法自动设置坐标参数（0,0）。也就是说，当前笔触自动重置回默认坐标。 </p><h3 id="色彩-Colors"><a href="#色彩-Colors" class="headerlink" title="色彩 Colors"></a>色彩 Colors</h3><p>◼ 前面已经学过了很多绘制图形的方法。如果我们想要给图形上色，有两个重要的属性可以做到： </p><p> fillStyle &#x3D; color： 设置图形的填充颜色，需在 fill() 函数前调用。 </p><p> strokeStyle &#x3D; color： 设置图形轮廓的颜色，需在 stroke() 函数前调用。 </p><p>◼ color颜色 </p><p> color 可以是表示 CSS 颜色值的字符串，支持：关键字、十六进制、rgb、rgba格式。 </p><p> 默认情况下，线条和填充颜色都是黑色（CSS 颜色值 #000000）。 </p><p>◼ 注意 </p><p> 一旦设置了 strokeStyle 或者 fillStyle 的值，那么这个新值就会成为新绘制的图形的默认值。 </p><p> 如果你要给图形上不同的颜色，你需要重新设置 fillStyle 或 strokeStyle 的值。 </p><p>◼ 额外补充 </p><p> fill() 函数是图形填充，fillStyle属性是设置填充色 </p><p> stroke() 函数是图形描边，strokeStyle属性是设置描边色 </p><h3 id="透明度-Transparent"><a href="#透明度-Transparent" class="headerlink" title="透明度 Transparent"></a>透明度 Transparent</h3><p>◼ 除了可以绘制实色图形，我们还可以用 canvas 来绘制半透明的图形。 </p><p>◼ 方式一：strokeStyle 和 fillStyle属性结合RGBA： </p><p>◼ 方式二：globalAlpha 属性  globalAlpha &#x3D; 0 ~ 1 ✓ 这个属性影响到 canvas 里所有图形的透明度 ✓ 有效的值范围是 0.0（完全透明）到 1.0（完全不透明），默认是 1.0。 </p><h3 id="线型-Line-styles"><a href="#线型-Line-styles" class="headerlink" title="线型 Line styles"></a>线型 Line styles</h3><p>◼ 调用lineTo()函数绘制的线条，是可以通过一系列属性来设置线的样式。 </p><p> lineWidth &#x3D; value： 设置线条宽度。 </p><p> lineCap &#x3D; type： 设置线条末端样式。 </p><p> lineJoin &#x3D; type： 设定线条与线条间接合处的样式。 </p><p> ….. </p><p>◼ lineWidth </p><p> 设置线条宽度的属性值必须为正数。默认值是 1.0px，不需单位。（ 零、负数、Infinity和NaN值将被忽略） </p><p> 线宽是指给定路径的中心到两边的粗细。换句话说就是在路径的两边各绘制线宽的一半。 </p><p> 如果你想要绘制一条从 (3,1) 到 (3,5)，宽度是 1.0 的线条，你会得到像第二幅图一样的结果。 </p><p>✓ 路径的两边个各延伸半个像素填充并渲染出1像素的线条（深蓝色部分） </p><p>✓ 两边剩下的半个像素又会以实际画笔颜色一半色调来填充（浅蓝部分） </p><p>✓ 实际画出线条的区域为（浅蓝和深蓝的部分），填充色大于1像素了，这就是为何宽度为 1.0 的线经常并不准确的原因。 </p><p> 要解决这个问题，必须对路径精确的控制。如，1px的线条会在路径两边各延伸半像素，那么像第三幅图那样绘制从 (3.5 ,1) 到 (3.5, 5) 的线条，其边缘正好落在像素边界，填充出来就是准确的宽为 1.0 的线条。 </p><h3 id="线型-Line-styles-1"><a href="#线型-Line-styles-1" class="headerlink" title="线型 Line styles"></a>线型 Line styles</h3><p>◼ lineCap： 属性的值决定了线段端点显示的样子。它可以为下面的三种的其中之一： </p><p> butt 截断，默认是 butt。 </p><p> round 圆形 </p><p> square 正方形 </p><p>◼ lineJoin： 属性的值决定了图形中线段连接处所显示的样子。它可以是这三种之一： </p><p> round 圆形 </p><p> bevel 斜角 </p><p> miter 斜槽规，默认是 miter。 </p><h3 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h3><p>◼ canvas 提供了两种方法来渲染文本： </p><p> fillText(text, x, y [, maxWidth]) </p><p>✓ 在 (x,y) 位置，填充指定的文本 </p><p>✓ 绘制的最大宽度（可选）。 </p><p> strokeText(text, x, y [, maxWidth]) </p><p>✓ 在 (x,y) 位置，绘制文本边框 </p><p>✓ 绘制的最大宽度（可选）。 </p><p>◼ 文本的样式（需在绘制文本前调用） </p><p> font &#x3D; value： 当前绘制文本的样式。这个字符串使用和 CSS font 属性相同的语法。默认的字体是：10px sans-serif。 </p><p> textAlign &#x3D; value：文本对齐选项。可选的值包括：start, end, left, right or center. 默认值是 start </p><p> textBaseline &#x3D; value：基线对齐选项。可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。 </p><p>✓ 默认值是 alphabetic。 </p><h3 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h3><p>◼ 绘制图片，可以使用 drawImage 方法将它渲染到 canvas 里。drawImage 方法有三种形态： </p><p> drawImage(image, x, y) </p><p>✓ 其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。 </p><p> drawImage(image, x, y, width, height) </p><p>✓ 这个方法多了 2 个参数：width 和 height，这两个参数用来控制 当向 canvas 画入时应该缩放的大小 </p><p> drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) </p><p>✓ 第一个参数和其它的是相同的，都是一个图像或者另一个 canvas 的引用。其它 8 个参数最好是参照右边的图解，前 4 个 是定义图像源的切片位置和大小，后 4 个则是定义切片的目标显示位置和大小。 </p><p>◼ 图片的来源，canvas 的 API 可以使用下面这些类型中的一种作为图片的源： </p><p> HTMLImageElement：这些图片是由Image()函数构造出来的，或者任何的<code>&lt;img&gt;</code>元素。 </p><p> HTMLVideoElement：用一个 HTML  的 <code>&lt;video&gt;</code>元素作为你的图片源，可以从视频中抓取当前帧作为一个图像。<br> HTMLCanvasElement：可以使用另一个 <code>&lt;canvas&gt;</code> 元素作为你的图片源。<br> ….</p><h3 id="Canvas绘画状态-保存和恢复"><a href="#Canvas绘画状态-保存和恢复" class="headerlink" title="Canvas绘画状态-保存和恢复"></a>Canvas绘画状态-保存和恢复</h3><p>Canvas绘画状态-保存和恢复 coderwhy </p><p>◼ Canvas绘画状态 </p><p> 是当前绘画时所产生的样式和变形的一个快照。 </p><p> Canvas在绘画时，会产生相应的绘画状态，其实我们是可以将某些绘画的状态存储在栈中来为以后复用。 </p><p> Canvas 绘画状态的可以调用 save 和 restore 方法是用来保存和恢复，这两个方法都没有参数，并且它们是成对存在的。 </p><p>◼ 保存和恢复（Canvas）绘画状态 </p><p> save()：保存画布 (canvas) 的所有绘画状态 </p><p> restore()：恢复画布 (canvas) 的所有绘画状态 </p><p>◼ Canvas绘画状态包括： </p><p> 当前应用的变形（即移动，旋转和缩放） </p><p> 以及这些属性：strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, font, textAlign, textBaseline …… </p><p> 当前的裁切路径（clipping path） </p><h3 id="变形-Transform"><a href="#变形-Transform" class="headerlink" title="变形 Transform"></a>变形 Transform</h3><p>◼ Canvas和CSS3一样也是支持变形，形变是一种更强大的方法，可以将坐标原点移动到另一点、形变可以对网格进行旋转和缩放。 </p><p>◼ Canvas的形变有4种方法实现： </p><p> translate(x, y)：用来移动 canvas 和它的原点到一个不同的位置。 </p><p>✓ x 是左右偏移量，y 是上下偏移量（无需要单位），如右图所示。 </p><p> rotate(angle)：用于以原点为中心旋转 canvas，即沿着z轴旋转。 </p><p>✓ angle是旋转的弧度，是顺时针方向，以弧度为单位。 </p><p> scale(x, y)：用来增减图形在 canvas 中像素数目，对图形进行缩小或放大。 </p><p>✓ x 为水平缩放因子，y 为垂直缩放因子。如果比 1 小，会缩小图形，如果比 1 大会放大图形。默认值为 1，也支持负数。 </p><p> transform(a, b, c, d, e, f)： 允许对变形矩阵直接修改。这个方法是将当前的变形矩阵乘上一个基于自身参数的矩阵。 </p><p>◼ 注意事项： </p><p> 在做变形之前先调用 save 方法保存状态是一个良好的习惯。 </p><p> 大多数情况下，调用 restore 方法比手动恢复原先的状态要简单得多。 </p><p> 如果在一个循环中做位移但没有保存和恢复canvas状态，很可能到最后会发现有些东西不见了，因为它很可能已超出canvas画布以外了。 </p><p> 形变需要在绘制图形前调用。 </p><h3 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转-rotate"></a>旋转-rotate</h3><p>◼ translate方法，它用来移动 canvas 和它的原点到一个不同的位置。 </p><p> translate(x, y) ✓ x 是左右偏移量，y 是上下偏移量（无需单位）。 </p><p>◼ 移动 canvas 原点的好处 </p><p> 如不使用 translate方法，那么所有矩形默认都将被绘制在相同的（0,0）坐标原点。 </p><p> translate方法可让我们任意放置图形，而不需要手工一个个调整坐标值。 </p><p>◼ 移动矩形案例 </p><p> 第一步：先保存一下canvas当前的状态  第二步：在绘制图形前translate移动画布 </p><p> 第三步：开始绘制图形，并填充颜色 移动-translate coderwhy </p><p>◼ rotate方法，它用于以原点为中心旋转 canvas，即沿着 z轴 旋转。 </p><p> rotate(angle) ✓ 只接受一个参数：旋转的角度 (angle)，它是顺时针方向，以弧度为单位的值。 ✓ 角度与弧度的 JS 表达式：弧度&#x3D;( Math.PI &#x2F; 180 ) * 角度 ，即 1角度 &#x3D; Math.PI&#x2F;180 个弧度。 </p><p> 比如：旋转90°：Math.PI &#x2F; 2； 旋转180°：Math.PI ； 旋转360°：Math.PI * 2； 旋转-90°：-Math.PI &#x2F; 2； </p><p> 旋转的中心点始终是 canvas 的原坐标点，如果要改变它，我们需要用到 translate方法。 </p><p>◼ 旋转案例 </p><p> 第一步：先保存一下Canvas当前的状态，并确定旋转原点 </p><p> 第二步：在绘制图形前旋转画布（坐标系会跟着旋转了） </p><p> 第三步：开始绘制图形，并填充颜色 </p><h3 id="缩放-scale"><a href="#缩放-scale" class="headerlink" title="缩放-scale"></a>缩放-scale</h3><p>◼ scale方法可以缩放画布。可用它来增减图形在 canvas 中的像素数目，对图形进行缩小或者放大。 </p><p> scale(x, y) </p><pre><code> x 为水平缩放因子，y 为垂直缩放因子，也支持负数。 </code></pre><p>​如果比 1 小，会缩小图形，如果比 1 大会放大图形。默认值为 1。 </p><p>◼ 注意事项 </p><p> 画布初始情况下，是以左上角坐标为原点。如果参数为负实数，相当于以 x 或 y 轴作为对称轴镜像反转。  例如，使用translate(0, canvas.height); scale(1,-1); 以 y 轴作为对称轴镜像反转。 </p><p> 默认情况下，canvas 的 1 个单位为 1 个像素。如果我们设置缩放因子是 0.5，1 个单位就变成对应 0.5 个像素，这样绘制出 来的形状就会是原先的一半。同理，设置为 2.0 时，1 个单位就对应变成了 2 像素，绘制的结果就是图形放大了 2 倍。 </p><p>◼ 缩放案例实战 </p><p> 第一步：先保存一下Canvas当前的状态，并确定缩放原点 </p><p> 第二步：在绘制图形前缩放画布  第三步：开始绘制图形，并填充颜色 </p><h3 id="Canvas动画"><a href="#Canvas动画" class="headerlink" title="Canvas动画"></a>Canvas动画</h3><p>◼ Canvas绘图都是通过JavaScript 去操控的，如要实现一些交互性动画是相当容易的。那Canvas是如何做一些基本动画的？ </p><p> canvas可能最大的限制就是图像一旦绘制出来，它就是一直保持那样了。 </p><p> 如需要执行动画，不得不对画布上所有图形进行一帧一帧的重绘（比如在1秒绘60帧就可绘出流畅的动画了）。 </p><p> 为了实现动画，我们需要一些可以定时执行重绘的方法。然而在Canvas中有三种方法可以实现： 分别为 setInterval 、 setTimeout 和 requestAnimationFrame 三种方法来定期执行指定函数进行重绘。 </p><p>◼ Canvas 画出一帧动画的基本步骤（如要画出流畅动画，1s 需绘60帧）： </p><p> 第一步：用 clearRect 方法清空 canvas ，除非接下来要画的内容会完全充满 canvas（例如背景图），否则你需要清空所有。 </p><p> 第二步：保存 canvas 状态，如果加了 canvas 状态的设置（样式，变形之类的），又想在每画一帧之时都是原始状态的话， 你需要先保存一下，后面再恢复原始状态。 </p><p> 第三步：绘制动画图形（animated shapes） ，即绘制动画中的一帧。 </p><p> 第四步：恢复 canvas 状态，如果已经保存了 canvas 的状态，可以先恢复它，然后重绘下一帧。 </p>]]></content>
      
      
      <categories>
          
          <category> 案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> canvas动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯css实现3D立体webpack Logo</title>
      <link href="/2023/04/01/chun-css3-shi-xian-3d-li-ti-webpack-logo/"/>
      <url>/2023/04/01/chun-css3-shi-xian-3d-li-ti-webpack-logo/</url>
      
        <content type="html"><![CDATA[<h2 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h2><h3 id="3D动画-transform"><a href="#3D动画-transform" class="headerlink" title="3D动画 - transform"></a>3D动画 - transform</h3><ul><li><p>CSS3 transform属性不但允许你进行2D的旋转，缩放或平移指定的元素，还支持3D变换元素。 </p></li><li><p>常见的函数transform function有： </p><ul><li>平移：<code>translate3d(tx, ty, tz)</code> 、<code> translateX(tx)</code> 、<code>translateY(ty)</code>、<code>translateZ(tz)</code> </li><li>缩放：<code>scale3d(sx, sy, sz)</code> 、 <code>scaleX(sy)</code>、<code>scaleY(sy)</code>、<code>scaleZ(sz)</code></li><li>旋转：<code>rotate3d(x, y, z, a)</code> 、<code> rotateX(x)</code>、<code>rotateY(y)</code>、<code>rotateZ(z) </code></li></ul></li><li><p>通过上面的几个函数，可以改变某个元素的3D形变。 </p></li><li><p>3D形变函数会创建一个合成层来启用GPU硬件加速，比如： <code>translate3d</code>、 <code>translateZ</code>、 <code>scale3d</code> 、 <code>rotate3d</code> …</p></li></ul><h3 id="3D旋转-rotateZ-、rotateX、rotateY"><a href="#3D旋转-rotateZ-、rotateX、rotateY" class="headerlink" title="3D旋转 - rotateZ 、rotateX、rotateY"></a>3D旋转 - rotateZ 、rotateX、rotateY</h3><ul><li><p>旋转：<code>rotateX(deg)</code>、<code>rotateY(deg)</code>、<code>rotateZ(deg)</code> </p><p>该CSS函数定义一个变换，它将元素围绕固定轴旋转。旋转量由指定的角度确定; 为正，旋转将为顺时针，为负，则为逆时针。 </p></li><li><p>值个数 </p></li><li><p>只有一个值，表示旋转的角度（单位deg） </p></li><li><p>值类型：</p><ul><li><code>deg</code>： 类型，表示旋转角度（不是弧度） </li><li>正数为顺时针 </li><li>负数为逆时针</li></ul></li><li><p>简写：<code>rotate3d(x, y, z, deg) </code></p></li><li><p>注意：旋转的原点受 <code>transform-origin</code> 影响</p></li></ul><h3 id="3D旋转-rotate3d"><a href="#3D旋转-rotate3d" class="headerlink" title="3D旋转 - rotate3d"></a>3D旋转 - rotate3d</h3><ul><li><p>旋转：<code>rotateX(deg)</code>、<code>rotateY(deg)</code>、<code>rotateZ(deg) </code></p><p>该CSS函数定义一个变换，它将元素围绕固定轴旋转。旋转量由指定的角度确定; 为正，旋转将为顺时针，为负，则为逆时针。 </p></li><li><p>值个数 </p></li><li><p>只有一个值，表示旋转的角度（单位deg） </p></li><li><p>值类型： </p><ul><li><code>deg</code>： 类型，表示旋转角度（不是弧度） </li><li>正数为顺时针 </li><li>负数为逆时针</li></ul></li><li><p>简写：<code>rotate3d(x, y, z, deg) </code></p></li><li><p>注意：旋转的原点受 <code>transform-origin</code> 影响</p></li></ul><h3 id="3D透视-perspective"><a href="#3D透视-perspective" class="headerlink" title="3D透视 - perspective"></a>3D透视 - perspective</h3><ul><li><p>透视：<code>perspective </code></p><ul><li>定了观察者与 <code>z=0</code> 平面的距离，使具有三维位置变换的元素产生透视效果（z表示Z轴）。 </li><li><code>z&gt;0</code> 的三维元素比正常的大，而 <code>z&lt;0</code> 时则比正常的小，大小程度由该属性的值决定。</li></ul></li><li><p>值个数 </p><ul><li>只有一个值，表示观察者距离 <code>z=0</code> 的平面距离 </li><li><code>none</code>：没有应用 <code>perspective</code> 样式时的默认值。 </li><li><code>length</code>：定观察者距离 <code>z=0</code> 平面的距离(如右图d的距离，单位px)。 当值<code>&gt;0</code>为元素及其内容应用透视变换。当值为 0 或负值时，无透视变换。</li></ul></li><li><p>透视的两种使用方式： </p><ul><li>在父元素上定义 CSS 透视属性 </li><li>如果它是子元素或单元素子元素，可以使用函数 perspective()</li></ul></li></ul><h3 id="3D位移-translateX、translateY、translateZ"><a href="#3D位移-translateX、translateY、translateZ" class="headerlink" title="3D位移 - translateX、translateY、translateZ"></a>3D位移 - translateX、translateY、translateZ</h3><ul><li><p>平移：<code>translateX(x)</code>、<code>translateY(y)</code>、<code>translateZ(z)</code> </p><ul><li>该函数表示在二、三维平面上移动元素。</li></ul></li><li><p>值个数 </p><ul><li>只有一个值，设置对应轴上的位移</li></ul></li><li><p>值类型： </p><ul><li>数字：100px </li><li>百分比：参照元素本身</li></ul></li></ul><h3 id="3D位移-translate3d"><a href="#3D位移-translate3d" class="headerlink" title="3D位移 - translate3d"></a>3D位移 - translate3d</h3><ul><li><p>平移：<code>translate3d(tx, ty, tz) </code></p><ul><li>该CSS 函数在 3D 空间内移动一个元素的位置。这个移动由一个三维向量来表达，分别表示他在三个方向上移动的距离。</li></ul></li><li><p>值个数 </p></li><li><p>三个值时，表示在 3D 空间之中， <code>tx, ty, tz</code> 分别表示他在三个方向上移动的距离。 </p></li><li><p>值类型： </p><ul><li><code>tx</code>：是一个  代表移动向量的横坐标。 </li><li><code>ty</code>：是一个 代表移动向量的纵坐标。 </li><li><code>tz</code>：是一个  代表移动向量的 z 坐标。它不能是 值；那样的移动是没有意义的。</li></ul></li><li><p>注意： </p><ul><li><code>translateX(tx)</code>等同于 <code>translate(tx, 0)</code> 或者 <code>translate3d(tx, 0, 0)</code>。 </li><li><code>translateY(ty)</code> 等同于<code>translate(0, ty)</code> 或者 <code>translate3d(0, ty, 0)</code>。 </li><li><code>translateZ(zx)</code>等同于 <code>translate3d(0, 0, tz)</code>。</li></ul></li></ul><h3 id="3D缩放-scaleX、scaleY、scaleZ"><a href="#3D缩放-scaleX、scaleY、scaleZ" class="headerlink" title="3D缩放 - scaleX、scaleY、scaleZ"></a>3D缩放 - scaleX、scaleY、scaleZ</h3><ul><li><p>缩放：<code>scaleX</code>、<code>scaleY</code>、<code>scaleZ</code></p><ul><li>函数指定了一个沿 <code>x</code>、<code>y</code> 、<code>z</code>轴调整元素缩放比例因子。</li></ul></li><li><p>值个数 </p><ul><li>一个值时，设置对应轴上的缩放（无单位）</li></ul></li><li><p>值类型： </p><ul><li><p>数字： </p><p> 1：保持不变 </p><p> 2：放大一倍 </p><p>0.5：缩小一半 </p></li><li><p>百分比：不支持百分比</p></li></ul></li></ul><h3 id="3D缩放-scale3d"><a href="#3D缩放-scale3d" class="headerlink" title="3D缩放 - scale3d"></a>3D缩放 - scale3d</h3><ul><li>缩放：<code>scale3d(sx, sy，sz)</code> <ul><li>该CSS函数定义了在 3D 空间中调整元素的缩放比例因子 。</li></ul></li><li>值个数 <ul><li>三个值时，表示在 3D 空间之中， <code>sx</code>, <code>sy</code>, <code>sz </code>分别表示他在三个方向上缩放的向量。</li></ul></li><li>值类型： <ul><li><code>sx</code>：是一个代表缩放向量的横坐标。 </li><li><code>sy</code>：是一个表示缩放向量的纵坐标。 </li><li><code>sz</code>：是表示缩放向量的 z 分量的 a（再讲到3D正方体再演示）。</li></ul></li><li>注意： <ul><li><code>scaleX(sx)</code> 等价于<code>scale(sx, 1)</code> 或 <code>scale3d(sx, 1, 1) </code>。 </li><li><code>scaleY(sy)</code>等价于 <code>scale(1, sy) </code>或 <code>scale3d(1, sy, 1)</code>。 </li><li><code>scaleZ(sz)</code>等价于 &#96;scale3d(1, 1, sz)。</li></ul></li></ul><h3 id="3D空间-transform-style"><a href="#3D空间-transform-style" class="headerlink" title="3D空间 - transform-style"></a>3D空间 - transform-style</h3><ul><li><p>变换式：<code>transform-style</code> </p><ul><li>该CSS属性用于设置元素的子元素是定位在 3D 空间中还是平展在元素的2D平面中。 </li><li>在3D空间中同样是可以使用透视效果。</li></ul></li><li><p>值类型： </p><ul><li><code>flat</code>：指示元素的子元素位于元素本身的平面内。 </li><li><code>preserve-3d</code>：指示元素的子元素应位于 3D 空间中。</li></ul></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>绘制小正方体的侧面图 </p><p><img src="https://i.postimg.cc/CMBFmmhG/image-20230401165613481.png" alt="image-20230401165613481"></p><p>绘制小正方体的个六面 </p><p><img src="https://i.postimg.cc/bdcVTzzB/image-20230401165643454.png" alt="image-20230401165643454"></p><p>绘制大正方体的侧面图 </p><p><img src="https://i.postimg.cc/jdyRr2JC/image-20230401165902429.png" alt="image-20230401165914982"></p><p>绘制大正方体的个六面 </p><p><img src="https://i.postimg.cc/pLxRVvDC/image-20230401165939739.png" alt="image-20230401165939739"></p><p>添加旋转动画</p><p><img src="https://i.postimg.cc/xCZ4XvBY/Document-Google-Chrome-2023-04-01-17-06-52.gif" alt="Document - Google Chrome 2023-04-01 17-06-52"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body, html &#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: #2b3a42;</span><br><span class="line"></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.webpack-logo &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    /* border: solid 1px pink; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul &#123;</span><br><span class="line">   padding: 0;</span><br><span class="line">   margin: 0;</span><br><span class="line">   list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    position: absolute;</span><br><span class="line"></span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin: -25px 0 0 -25px;</span><br><span class="line"></span><br><span class="line">    transform-style: preserve-3d;</span><br><span class="line"></span><br><span class="line">    transform: rotateX(-33.5deg) rotateY(45deg);</span><br><span class="line">    </span><br><span class="line">    animation: innerLoop 6s ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes innerLoop &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        transform: rotateX(-33.5deg) rotateY(45deg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50%, 100% &#123;</span><br><span class="line">        transform: rotateX(-33.5deg) rotateY(-315deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner li &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    border: 1px solid rgb(255, 255, 255);</span><br><span class="line">    background-color: #175d95;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner .top &#123;</span><br><span class="line">    transform: rotateX(90deg) translateZ(25px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner .bottom &#123;</span><br><span class="line">    transform: rotateX(-90deg) translateZ(25px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner .left &#123;</span><br><span class="line">    transform: translateZ(25px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner .right &#123;</span><br><span class="line">    transform: translateZ(-25px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner .front &#123;</span><br><span class="line">    transform: rotateY(-90deg) translateZ(25px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-inner .behind &#123;</span><br><span class="line">    transform: rotateY(90deg) translateZ(25px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    position: absolute;</span><br><span class="line"></span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin: -50px 0 0 -50px;</span><br><span class="line"></span><br><span class="line">    transform-style: preserve-3d;</span><br><span class="line"></span><br><span class="line">    transform: rotateX(-33.5deg) rotateY(45deg);</span><br><span class="line">    </span><br><span class="line">    animation: outerLoop 6s ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes outerLoop &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        transform: rotateX(-33.5deg) rotateY(45deg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50%, 100% &#123;</span><br><span class="line">        transform: rotateX(-33.5deg) rotateY(415deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer li &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    border: 1px solid rgb(255, 255, 255);</span><br><span class="line">    background-color: rgba(141, 214, 249, 0.505);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer .top &#123;</span><br><span class="line">    transform: rotateX(90deg) translateZ(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer .bottom &#123;</span><br><span class="line">    transform: rotateX(-90deg) translateZ(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer .left &#123;</span><br><span class="line">    transform: translateZ(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer .right &#123;</span><br><span class="line">    transform: translateZ(-50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer .front &#123;</span><br><span class="line">    transform: rotateY(-90deg) translateZ(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cube-outer .behind &#123;</span><br><span class="line">    transform: rotateY(90deg) translateZ(50px);</span><br><span class="line">&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;webpack-logo&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- cube-inner --&gt;</span><br><span class="line">        &lt;ul class=&quot;cube-inner&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;top&quot;&gt;1&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;bottom&quot;&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;left&quot;&gt;3&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;right&quot;&gt;4&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;front&quot;&gt;5&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;behind&quot;&gt;6&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- cube-outer --&gt;</span><br><span class="line">        &lt;ul class=&quot;cube-outer&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;top&quot;&gt;1&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;bottom&quot;&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;left&quot;&gt;3&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;right&quot;&gt;4&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;front&quot;&gt;5&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;behind&quot;&gt;6&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D动画 </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题整理-HTML和CSS</title>
      <link href="/2023/03/20/mian-shi-ti-zheng-li-html-css/"/>
      <url>/2023/03/20/mian-shi-ti-zheng-li-html-css/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><blockquote><p>IE: trident 内核<br>Firefox：gecko 内核<br>Safari: webkit 内核<br>Opera: 以前是 presto 内核，Opera 现已改用 GoogleChrome 的 Blink 内核<br>Chrome: Blink(基于 webkit，Google 与 Opera Software 共同开发)</p></blockquote><h3 id="你是怎么理解-HTML-语义化"><a href="#你是怎么理解-HTML-语义化" class="headerlink" title="你是怎么理解 HTML 语义化"></a><strong>你是怎么理解</strong> <strong>HTML</strong> <strong>语义化</strong></h3><p>HTML 语义化简单来说就是用正确的标签来做正确的事。<br>比如表示段落用 p 标签、表示标题用 h1-h6 标签、表示文章就用 article 等。</p><h3 id="DOCTYPE-的作用"><a href="#DOCTYPE-的作用" class="headerlink" title="DOCTYPE 的作用"></a>DOCTYPE 的作用</h3><blockquote><p><a href="https://www.cnblogs.com/wuqiutong/p/5986191.htmlhttps://www.cnblogs.com/wuqiutong/p/5986191.html">Doctype 作用？严格模式与混杂模式如何区分？它们有何差异？</a></p></blockquote><ol><li><p><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器以何种模式来渲染文档。</p></li><li><p>严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。</p></li><li><p>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站 点无法工作。</p></li><li><p><code>DOCTYPE</code> 不存在或格式不正确会导致文档以混杂模式呈现。复制代码 你知道多少种 <code>Doctype</code> 文档类型？ 该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 <code>HTML</code> 文档。 HTML 4.01 规定了三种文档类型：<code>Strict</code>、<code>Transitional</code> 以及 <code>Frameset</code>。 XHTML 1.0 规定了三种 XML 文档类型：<code>Strict</code>、<code>Transitional</code> 以及 <code>Frameset</code>。 <code>Standards</code> （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 <code>Quirks</code> （包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。</p></li></ol><h3 id="行内元素、块级元素、-空元素有那些？"><a href="#行内元素、块级元素、-空元素有那些？" class="headerlink" title="行内元素、块级元素、 空元素有那些？"></a>行内元素、块级元素、 空元素有那些？</h3><ul><li>行内元素 (不能设置宽高，设置宽高无效) a,span,i,em,strong,label</li><li>行内块元素：<code>img</code>, <code>input</code></li><li>块元素： <code>div</code>, <code>p</code>, <code>h1-h6</code>, <code>ul</code>,<code>li</code>,<code>ol</code>,<code>dl</code>,<code>table</code>…</li><li>空元素 <code>br</code>, <code>hr</code>,<code>img</code>, <code>input</code>,<code>link</code>,<code>meta</code></li></ul><p>可以通过 display 修改 <code>inline-block</code>, <code>block</code>, <code>inline</code></p><p><strong>注意</strong></p><p>只有文字才能组成段落，因此 <code>p</code> 标签里面不能放块级元素，特别是 <code>p</code> 标签不能放 <code>div</code>。同理还有这些标签<code>h1,h2,h3,h4,h5,h6,dt</code> ，他们都是文字类块级标签，里面不能放其他块级元素。</p><h3 id="meta-viewport-是做什么用的，怎么写"><a href="#meta-viewport-是做什么用的，怎么写" class="headerlink" title="meta viewport 是做什么用的，怎么写"></a><strong>meta viewport</strong> <strong>是做什么用的，怎么写</strong></h3><p>使用目的</p><p>告诉浏览器，用户在移动端时如何缩放页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, </span></span></span><br><span class="line"><span class="string"><span class="tag">               initial-scale=1, </span></span></span><br><span class="line"><span class="string"><span class="tag">               maximum-scale-1, minimum-scale=1&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p><code>with=device-width</code> 将布局视窗（layout viewport）的宽度设置为设备屏幕分辨率的宽度</p><p><code>initial-scale=1</code> 页面初始缩放比例为屏幕分辨率的宽度</p><p><code>maximum-scale=1</code> 指定用户能够放大的最大比例</p><p><code>minimum-scale=1</code> 指定用户能够缩小的最大比例</p><h3 id="label-标签的作用"><a href="#label-标签的作用" class="headerlink" title="label 标签的作用"></a><strong>label</strong> <strong>标签的作用</strong></h3><p>label 标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;Name&quot;</span>&gt;</span>Number:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Name&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span></span></span><br><span class="line"><span class="tag">  &gt;</span>Date:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;B&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="canvas-在标签上设置宽高-和在-style-中设置宽高有什么-区别"><a href="#canvas-在标签上设置宽高-和在-style-中设置宽高有什么-区别" class="headerlink" title="canvas 在标签上设置宽高 和在 style 中设置宽高有什么 区别"></a><strong>canvas</strong> <strong>在标签上设置宽高 和在</strong> <strong>style</strong> <strong>中设置宽高有什么</strong> <strong>区别</strong></h3><blockquote><p>canvas 标签的 width 和 height 是画布实际宽度和高度，绘制的图形都是在这个上面。<br>而 style 的 width 和 height 是 canvas 在浏览器中被渲染的高度和宽度。<br>如果 canvas 的 width 和 height 没指定或值不正确，就被设置成默认值 。</p></blockquote><h3 id="html5-新特性"><a href="#html5-新特性" class="headerlink" title="html5 新特性"></a>html5 新特性</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/77131734">HTML5 新特性</a></p></blockquote><ol><li>语义化标签， header, footer, nav, aside,article,section</li><li>增强型表单</li><li>视频 video 和音频 audio</li><li>Canvas 绘图</li><li><a href="https://so.csdn.net/so/search?q=SVG&spm=1001.2101.3001.7020">SVG</a>绘图</li><li>地理定位</li><li>拖放 API</li><li>WebWorker</li><li>WebStorage( 本地离线存储 localStorage、sessionStorage )</li><li>WebSocket</li></ol><h3 id="css3-新特性"><a href="#css3-新特性" class="headerlink" title="css3 新特性"></a>css3 新特性</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/136700705">CSS3 有哪些新特性？CSS3 新特性详解</a></p></blockquote><p>1、圆角效果；2、图形化边界；3、块阴影与文字阴影；4、使用 RGBA 实现透明效果；5、渐变效果；6、使用“@Font-Face”实现定制字体；7、多背景图；8、文字或图像的变形处理；9、多栏布局；10、媒体查询等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、颜色：新增RGBA、HSLA模式</span><br><span class="line">2、文字阴影：（text-shadow）</span><br><span class="line">3、边框：圆角（border-radius）边框阴影：box-shadow</span><br><span class="line">4、盒子模型：box-sizing</span><br><span class="line">5、背景：background-size,background-origin background-clip(削弱)</span><br><span class="line">6、渐变：linear-gradient(线性渐变):</span><br><span class="line">eg: background-image: linear-gradient(100deg, #237b9f, #f2febd);</span><br><span class="line">radial-gradient (径向渐变)</span><br><span class="line">7、过渡：transition可实现动画</span><br><span class="line">8、自定义动画： animate@keyfrom</span><br><span class="line">9、媒体查询：多栏布局@media screen and (width:800px)</span><br><span class="line">10、border-image</span><br><span class="line">11、2D转换:transform:translate(x,y) rotate(x,y)旋转 skew(x,y)倾斜 scale(x,y)缩放</span><br><span class="line">12、3D转换</span><br><span class="line">13、字体图标：Font-Face</span><br><span class="line">14、弹性布局：flex</span><br></pre></td></tr></table></figure><h3 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h3><p>id 选择器（ #myid）</p><p>类选择器（.myclassname）</p><p>标签选择器（div, h1, p）相邻选择器（h1 + p）</p><p>子选择器（ul &gt; li）后代选择器（li a）</p><p>属性选择器（a[rel &#x3D; “external”]）</p><p>伪类选择器（a: hover, li:nth-child）</p><p>通配符选择器（ * ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    !Important &gt; 行内式 &gt; id &gt; 类/伪类/属性 &gt; 标签选择器  &gt;  全局</span><br><span class="line">（对应权重：无穷大∞ &gt; 1000&gt; 100 &gt;  10        &gt;  1   &gt;      0）</span><br></pre></td></tr></table></figure><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>一个盒子，会有 content,padding,border,margin 四部分，</p><p>标准的盒模型的宽高指的是 content 部分</p><p>ie 的盒模型的宽高包括了 content+padding+border</p><p>我们可以通过 box-sizing 修改盒模型，box-sizing <code>border-box</code> <code>content-box</code></p><h3 id="margin-合并"><a href="#margin-合并" class="headerlink" title="margin 合并"></a>margin 合并</h3><p>在垂直方向上的两个盒子，他们的 margin 会发生合并（会取最大的值），比如上边盒子设置<code>margin-bottom:20px</code>，下边盒子设置<code>margin-top:30px;</code>，那么两个盒子间的间距只有<code>30px</code>，不会是<code>50px</code></p><p>解决 margin 合并，我们可以给其中一个盒子套上一个父盒子，给父盒子设置 BFC</p><h3 id="margin-塌陷"><a href="#margin-塌陷" class="headerlink" title="margin 塌陷"></a>margin 塌陷</h3><p>效果： 一个父盒子中有一个子盒子，我们给子盒子设置<code>margin-top:xxpx</code>结果发现会带着父盒子一起移动（就效果和父盒子设置<code>margin-top:xxpx</code>的效果一样）</p><p>解决： 1、给父盒子设置 border，例如设置<code>border:1px solid red;</code> 2、给父盒子设置 BFC</p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><blockquote><p>块级格式化上下文 (block format context)</p></blockquote><p><strong>BFC 的布局规则</strong> *</p><ul><li>内部的 Box 会在垂直方向，一个接一个地放置。</li><li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠。</li><li>每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC 的区域不会与 float box 重叠。</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算。</li></ul><p><strong>触发 BFC 的条件</strong> *</p><ul><li>根元素 html</li><li>float 的值不是 none。</li><li>position 的值 absoute、fixed</li><li>display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex</li><li>overflow 的值不是 visible</li></ul><p><strong>解决什么问题</strong></p><ol><li><p>可以用来解决两栏布局<code>BFC 的区域不会与 float box 重叠</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: flet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决 margin 塌陷和 margin 合并问题</p></li><li><p>解决浮动元素无法撑起父元素</p></li></ol><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><blockquote><p>设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效</p></blockquote><h3 id="什么是-rem、px、em-区别"><a href="#什么是-rem、px、em-区别" class="headerlink" title="什么是 rem、px、em 区别"></a>什么是 rem、px、em 区别</h3><blockquote><p>rem 是一个相对单位，<strong>rem 的是相对于 html 元素的字体大小</strong>，<strong>没有继承性</strong></p><p>em 是一个相对单位，<strong>是相对于父元素字体大小有继承性</strong></p><p>px 是一个“绝对单位”，<strong>就是 css 中定义的像素</strong>，利用 px 设置字体大小及元素的宽高等，比较稳定和精确。</p></blockquote><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p><strong>响应式布局有哪些实现方式？什么是响应式设计？响应式设计的基本原理是什么？</strong></p><blockquote><p>1.百分比布局，但是无法对字体，边框等比例缩放</p><p>2.弹性盒子布局 display:flex</p><p>3.rem 布局，1rem&#x3D;html 的 font-size 值的大小</p><ol start="4"><li>css3 媒体查询 @media screen and(max-width: 750px){}</li></ol><p>5.vw+vh</p><p>6.使用一些框架（bootstrap，vant）</p><p>什么是响应式设计：响应式网站设计是一个网站能够兼容多个终端，智能地根据不同设备环境进行相对应的布局</p><p>响应式设计的基本原理：基本原理是通过媒体查询检测不同的设备屏幕尺寸设置不同的 css 样式 页面头部必须有 meta 声明的</p></blockquote><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><ul><li>两栏布局,左边定宽，右边自适应</li><li>三栏布局、圣杯布局、双飞翼布局</li></ul><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p>方法一：给父元素设置成弹性盒子，子元素横向居中，纵向居中</p><p>方法二：父相子绝后，子部分向上移动本身宽度和高度的一半，也可以用 transfrom:translate(-50%,-50%)（最常用方法）</p><p>方法三：父相子绝，子元素所有定位为 0，margin 设置 auto 自适应</p><h3 id="iframe-有哪些缺点？"><a href="#iframe-有哪些缺点？" class="headerlink" title="iframe 有哪些缺点？"></a><strong>iframe</strong> <strong>有哪些缺点？</strong></h3><p>iframe 是一种框架，也是一种很常见的网页嵌入方 </p><p><strong>iframe 的优点：</strong> </p><ol><li>iframe 能够原封不动的把嵌入的网页展现出来。 </li><li>如果有多个网页引用 iframe，那么你只需要修改 iframe 的内容，就可以实现调用的每一个页面内容的更改，方便快捷。 </li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 iframe 来嵌套，可以增加代码的可重用。 </li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由 iframe 来解决。</li></ol><p><strong>iframe 的缺点：</strong> </p><ol><li>会产生很多页面，不容易管理。 </li><li>iframe 框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。 </li><li>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理 iframe 中的内容，所以使用 iframe 会不利于搜索引擎优化。 </li><li>很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差。 </li><li>iframe 框架页面会增加服务器的 http 请求，对于大型网站是不可取的。现在基本上都是用 Ajax 来代替 iframe，所以 iframe 已经渐渐的退出了前端开发。</li></ol><h3 id="link-import-导入-css"><a href="#link-import-导入-css" class="headerlink" title="link @import 导入 css"></a><strong>link @import</strong> <strong>导入</strong> <strong>css</strong></h3><blockquote><p>link 是 XHTML 标签，除了加载 CSS 外，还可以定义 RSS 等其他事务；<br>@import 属于 CSS 范畴，  只能加载 CSS。<br>link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。link<br>无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。<br>link 支持使用 Javascript 控制 DOM 去改变样式；而@import 不支持。</p></blockquote><h3 id="DOM-事件机制-x2F-模型"><a href="#DOM-事件机制-x2F-模型" class="headerlink" title="DOM 事件机制&#x2F;模型"></a>DOM 事件机制&#x2F;模型</h3><blockquote><p>DOM0 级模型、IE 事件模型、DOM2 级事件模型</p></blockquote><p>就比如用户触发一个点击事件，有一个触发的过程</p><p>事件捕获-阶段（从上大小，从外到内）—&gt;处于目标事件-阶段—-&gt;事件冒泡-阶段（从下到上，从内到外）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;click&quot;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    event = event || <span class="variable language_">window</span>.<span class="property">event</span> <span class="comment">/*ie*/</span>;</span><br><span class="line">    <span class="keyword">const</span> target = event.<span class="property">target</span> || event.<span class="property">srcElement</span>; <span class="comment">/*ie*/</span> <span class="comment">// 拿到事件目标</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻止冒泡</span></span><br><span class="line">    <span class="comment">// event.stopPropagation()</span></span><br><span class="line">    <span class="comment">// event.cancelBubble=true; // ie</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻止默认事件</span></span><br><span class="line">    <span class="comment">// event.preventDefault();</span></span><br><span class="line">    <span class="comment">// event.returnValue=false; // ie</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 是否使用捕获，默认是fasle, */</span> fasle</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44f3f89d86344aacb901cd841620bbff~tplv-k3u1fbpfcp-watermark.awebp" alt="事件传播.jpeg"></p><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>简介：事件委托指的是，不在事件的发生地（直接 dom）上设置监听函数，而是</p><p>在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的</p><p>触发，通过判断事件发生元素 DOM 的类型，来做出不同的响应。</p><p>举例：最经典的就是 ul 和 li 标签的事件监听，比如我们在添加事件时候，采用</p><p>事件委托机制，不会在 li 标签上直接添加，而是在 ul 父元素上添加。</p><p>好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事</p><p>件触发机制</p><h3 id="如果需要手动写动画，你认为最小时间间隔是多久"><a href="#如果需要手动写动画，你认为最小时间间隔是多久" class="headerlink" title="如果需要手动写动画，你认为最小时间间隔是多久"></a>如果需要手动写动画，你认为最小时间间隔是多久</h3><blockquote><p>多数显示器默认频率是 60Hz，即 1 秒刷新 60 次，所以理论上最小间隔为 <code>1/60＊1000ms = 16.7ms </code></p></blockquote><h3 id="before和-after中双冒号和单冒号有什么区别"><a href="#before和-after中双冒号和单冒号有什么区别" class="headerlink" title="::before和:after中双冒号和单冒号有什么区别"></a>::before和:after中双冒号和单冒号有什么区别</h3><p>单冒号(:)用于 CSS3 伪类，双冒号(::)用于 CSS3 伪元素。 ::before 就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于 dom 之中，只存在在页面之中。 :before 和 :after 这两个伪元素，是在 CSS2.1 里新出现的。起初，伪元素的前缀使用的是单 冒号语法，但随着 Web 的进化，在 CSS3 的规范里，伪元素的语法被修改成使用双冒号，成 为::before ::after</p><h3 id="CSS-sprites-精灵图"><a href="#CSS-sprites-精灵图" class="headerlink" title="CSS sprites 精灵图"></a>CSS sprites 精灵图</h3><p>CSS Sprites 其实就是把网页中一些背景图片整合到一张图片文件中，再利用 CSS 的 <code>“background-image”，“ background-repeat ”，“ background-position”</code> 的 组 合 进 行 背 景 定 位 ， background-position 可以用数字能精确的定位出背景图片的位置。这样可以减少很多图片请 求的开销，因为请求耗时比较长；请求虽然可以并发，但是也有限制，一般浏览器都是 6 个</p><h3 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h3><p>重绘（repaint 或 redraw）：当盒子的位置、大小以及其他属性，例如颜色、字 体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将 内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器 会根据元素的新属性重新绘制，使元素呈现新的外观。<br>触发重绘的条件：改变元素外观属性。如：color，background-color 等。 注意：table 及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多花两倍时间，这就是我们尽量避免使用 table 布局页面的 原因之一。<br>重排（重构&#x2F;回流&#x2F;reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸， 布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要 一次回流，就是在页面第一次加载的时候。<br>重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效， 并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕 中，该过程称为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。</p>]]></content>
      
      
      <categories>
          
          <category> 八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app的使用教程</title>
      <link href="/2023/03/17/uni-app-de-shi-yong/"/>
      <url>/2023/03/17/uni-app-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>官网： <a href="https://uniapp.dcloud.io/">https://uniapp.dcloud.io/</a></p><p>下载地址: <a href="http://www.dcloud.io/hbuilderx.html">http://www.dcloud.io/hbuilderx.html</a></p><p><strong>配置环境变量</strong></p><p>在安装目录下有个：\plugins\launcher\tools\adbs</p><p>拷贝地址： D:\worksoft\HBuilderX\plugins\launcher\tools\adbs</p><p>在环境变量 path 中新建环境变量，粘贴地址</p><p><strong>配置手机模拟器</strong></p><p>下载手机模拟器 MUMU 地址： <a href="http://mumu.163.com/">http://mumu.163.com/</a></p><p>配置 hubilder 的连接配置 MUMU手机模拟器浏览器运行在 7555端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:7555</span><br></pre></td></tr></table></figure><p><strong>配置微信小程序</strong></p><p>在微信开发者工具里运行：进入项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app。</p><p>第一次使用时，需要先配置小程序ide的相关路径，才能运行成功，需在输入框输入微信开发者工具的安装路径。 若HBuilderX不能正常启动微信开发者工具，需要开发者手动启动，然后将uni-app生成小程序工程的路径拷贝到微信开发者工具里面，在HBuilderX里面开发，在微信开发者工具里面就可看到实时的效果。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─hybrid                存放本地网页的目录</span><br><span class="line">├─platforms             存放各平台专用页面的目录</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用静态资源（如图片、视频等）的地方，注意：静态资源只能存放于此</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">└─pages.json            配置页面路由、导航条、选项卡等页面类信息</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>Tips</strong></p><ul><li><code>static</code> 目录下的 <code>js</code> 文件不会被编译，如果里面有 <code>es6</code> 的代码，不经过转换直接运行，在手机设备上会报错。</li><li><code>css</code>、<code>less/scss</code> 等资源同样不要放在 <code>static</code> 目录下，建议这些公用的资源放在 <code>common</code> 目录下。</li></ul><table><thead><tr><th align="center">有效目录</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">app-plus</td><td align="center">5+App</td></tr><tr><td align="center">h5</td><td align="center">H5</td></tr><tr><td align="center">mp-weixin</td><td align="center">微信小程序</td></tr><tr><td align="center">mp-alipay</td><td align="center">支付宝小程序</td></tr><tr><td align="center">mp-baidu</td><td align="center">百度小程序</td></tr></tbody></table><h2 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h2><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><ul><li><p>应用生命周期仅可在<code>App.vue</code>中监听，在其它页面监听无效。</p></li><li><p><code>onLaunch</code>: 初始化完成时触发，全局只触发一次</p><ul><li>launch: 发射</li></ul></li><li><p><code>onShow</code>:  当 app 启动， 或从后台切换到前台显示</p></li><li><p><code>onHide</code>:  前台切换都后台</p></li></ul><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><ul><li><p><code>onLoad</code>: 页面加载时，有一个参数，是一个对象，其参数是上一个页面传递给这个页面的数据，不管页面卸载没有，重新进入页面会重新执行该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上一个页面</span></span><br><span class="line">uni.<span class="title function_">navigateT0</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;https://api.test.com?user=zhou&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">之后会把 &#123;<span class="attr">user</span>: zhou&#125; 传递给 <span class="title function_">onLoad</span>()</span><br></pre></td></tr></table></figure></li><li><p><code>onShow</code>: 监听页面显示， 只要页面没有卸载，之后重新进入页面不会执行，页面已经卸载了再进入会执行</p></li><li><p><code>onReady</code>: 监听页面初次渲染完成， 执行一次，页面没有卸载重新进入该页面不会执行该方法</p></li><li><p><code>onHide</code>: 监听页面隐藏</p></li><li><p><code>onUnload</code>: 监听页面卸载</p><ul><li>根据 <code>v-if</code>来显示与隐藏页面不会执行该方法</li></ul></li><li><p><code>onPullDownRefresh</code>: 监听用户下拉动作，一般用于下拉刷新</p></li><li><p><code>onReachBottom</code>: 页面上拉 触底事件的处理函数</p><ul><li>reach &#x2F;ri:tS&#x2F;：到达</li></ul></li><li><p><code>onTabItemTap</code>: 点击 tab 时触发， 参数为 object</p><ul><li>属性</li><li><code>index</code>: 被点击tabItem的序号，从0开始</li><li><code>pagePath</code>： 被点击tabItem的页面路径</li><li><code>text</code>：被点击tabItem的按钮文字</li></ul></li><li><p><code>onShareAppMessage</code>: 用户点击右上角的分享按钮</p></li><li><p><code>onPageScroll</code>: 监听页面滚动，参数为object</p><ul><li>属性 <code>scrollTop</code>: 页面在垂直方向已滚动的距离（px)</li></ul></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>uni-app</code>路由全部交给框架统一管理，开发者需要在<a href="https://uniapp.dcloud.io/collocation/pages?id=pages">pages.json</a>里配置每个路由页面的路径及页面样式，不支持 <code>Vue Router</code>。</p><p><code>uni-app</code> 有两种路由跳转方式：使用<a href="https://uniapp.dcloud.io/component/navigator">navigator</a>（导航）组件跳转、调用<a href="https://uniapp.dcloud.io/api/router">API</a>（路由）跳转。</p><h3 id="getCurrentPages"><a href="#getCurrentPages" class="headerlink" title="getCurrentPages()"></a><code>getCurrentPages()</code></h3><p>用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</p><p><strong>注意：</strong> <code>getCurrentPages()</code>仅用于展示页面栈的情况，请勿修改页面栈，以免造成页面状态错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> page = <span class="title function_">getCurrentPages</span>()</span><br><span class="line"><span class="comment">// 获取当前页面的路由</span></span><br><span class="line">page.<span class="property">route</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页面的webview对象实例 5+App</span></span><br><span class="line">page.$getAppWebview()</span><br></pre></td></tr></table></figure><h2 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口表现、设置多 tab 等。</p><h3 id="配置项列表"><a href="#配置项列表" class="headerlink" title="配置项列表"></a><a href="https://uniapp.dcloud.io/collocation/pages?id=%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%88%97%E8%A1%A8">配置项列表</a></h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">描述</th><th align="left">平台兼容</th></tr></thead><tbody><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">globalStyle</a></td><td align="left">Object</td><td align="left">否</td><td align="left">设置默认页面的窗口表现</td><td align="left"></td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=pages">pages</a></td><td align="left">Object Array</td><td align="left">是</td><td align="left">设置页面路径及窗口表现</td><td align="left"></td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=tabbar">tabBar</a></td><td align="left">Object</td><td align="left">否</td><td align="left">设置底部 tab 的表现</td><td align="left"></td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=condition">condition</a></td><td align="left">Object</td><td align="left">否</td><td align="left">启动模式配置</td><td align="left"></td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=subpackages">subPackages</a></td><td align="left">Object Array</td><td align="left">否</td><td align="left">分包加载配置</td><td align="left"></td></tr><tr><td align="left"><a href="https://uniapp.dcloud.io/collocation/pages?id=preloadrule">preloadRule</a></td><td align="left">Object</td><td align="left">否</td><td align="left">分包预下载规则</td><td align="left">微信小程序</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html">workers</a></td><td align="left">String</td><td align="left">否</td><td align="left"><code>Worker</code> 代码放置的目录</td><td align="left">微信小程序</td></tr></tbody></table><h3 id="globalStyle"><a href="#globalStyle" class="headerlink" title="globalStyle"></a>globalStyle</h3><p>用于设置应用的状态栏、导航条、标题、窗口背景色等</p><h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a><a href="https://uniapp.dcloud.io/collocation/pages?id=pages">pages</a></h3><p><code>uni-app</code> 通过 pages 节点配置应用由哪些页面组成，pages 节点接收一个数组，数组每个项都是一个对象，其属性值如下：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">String</td><td align="left"></td><td align="left">配置页面路径</td></tr><tr><td align="left">style</td><td align="left">Object</td><td align="left"></td><td align="left">配置页面窗口变现，配置项参考下方 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p><strong>Tips：</strong></p><ul><li>pages节点的第一项为应用入口页（即首页）</li><li><strong>应用中新增&#x2F;减少页面</strong>，都需要对 pages 数组进行修改</li><li>文件名<strong>不需要写后缀</strong>，框架会自动寻找路径下的页面资源</li></ul><h3 id="style"><a href="#style" class="headerlink" title="style"></a><a href="https://uniapp.dcloud.io/collocation/pages?id=style">style</a></h3><p>用于设置每个页面的状态栏、导航条、标题、窗口背景色等。</p><p>页面中配置项会覆盖 <a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">globalStyle</a> 中相同的配置项</p><h3 id="app-plus"><a href="#app-plus" class="headerlink" title="app-plus"></a><a href="https://uniapp.dcloud.io/collocation/pages?id=app-plus">app-plus</a></h3><p>配置编译到 App 平台时的特定样式，以下仅列出常用，更多配置项参考 <a href="http://www.html5plus.org/doc/zh_cn/webview.html#plus.webview.WebviewStyles">WebviewStyles</a>。</p><p>仅应用首页支持完整的 <code>app-plus</code> 配置，二级页面支持以下配置：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">titleNView</td><td align="left">Object</td><td align="left"></td><td align="left">导航栏</td></tr><tr><td align="left">bounce</td><td align="left">String</td><td align="left"></td><td align="left">页面回弹效果，设置为 “none” 时关闭效果。</td></tr><tr><td align="left">softinputNavBar</td><td align="left">String</td><td align="left"></td><td align="left">软键盘上导航条的显示模式，设置为 “none” 时关闭导航条。仅ios生效</td></tr><tr><td align="left">pullToRefresh</td><td align="left">Object</td><td align="left"></td><td align="left">下拉刷新</td></tr><tr><td align="left">scrollIndicator</td><td align="left">String</td><td align="left"></td><td align="left">滚动条显示策略，设置为 “none” 时不显示滚动条。</td></tr><tr><td align="left">animationType</td><td align="left">String</td><td align="left">pop-in</td><td align="left">窗口显示的动画效果，详见：<a href="https://uniapp.dcloud.io/api/router?id=animation">窗口动画</a>。仅 5+App 生效，H5 平台不支持。</td></tr><tr><td align="left">animationDuration</td><td align="left">Number</td><td align="left">300</td><td align="left">窗口显示动画的持续时间，单位为 ms。仅 5+App 生效，H5 平台不支持。</td></tr></tbody></table><h4 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a><a href="https://uniapp.dcloud.io/collocation/pages?id=app-titlenview">导航栏</a></h4><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">backgroundColor</td><td align="left">String</td><td align="left">#F7F7F7</td><td align="left">背景颜色，颜色值格式为”#RRGGBB”。</td><td align="left"></td></tr><tr><td align="left">buttons</td><td align="left">Array</td><td align="left"></td><td align="left">自定义按钮，详见 <a href="https://uniapp.dcloud.io/collocation/pages?id=app-titlenview-buttons">buttons</a></td><td align="left"></td></tr><tr><td align="left">titleColor</td><td align="left">String</td><td align="left">#000000</td><td align="left">标题文字颜色</td><td align="left"></td></tr><tr><td align="left">titleOverflow</td><td align="left">String</td><td align="left">ellipsis</td><td align="left">标题文字超出显示区域时处理方式。”clip”-超出显示区域时内容裁剪；”ellipsis”-超出显示区域时尾部显示省略标记（…）。</td><td align="left"></td></tr><tr><td align="left">titleText</td><td align="left">String</td><td align="left"></td><td align="left">标题文字内容</td><td align="left"></td></tr><tr><td align="left">titleSize</td><td align="left">String</td><td align="left"></td><td align="left">标题文字字体大小</td><td align="left"></td></tr><tr><td align="left">type</td><td align="left">String</td><td align="left">default</td><td align="left">导航栏样式。”default”-默认样式；”transparent”-透明渐变。</td><td align="left"></td></tr><tr><td align="left">tags</td><td align="left">Array</td><td align="left"></td><td align="left">原生 View 增强，详见：<a href="http://www.html5plus.org/doc/zh_cn/nativeobj.html#plus.nativeObj.ViewDrawTagStyles">5+ View 控件</a></td><td align="left"></td></tr><tr><td align="left">searchInput</td><td align="left">Object</td><td align="left"></td><td align="left">原生导航栏上的搜索框样式，详见：<a href="https://uniapp.dcloud.io/collocation/pages?id=app-titlenview-searchinput">searchInput</a></td><td align="left"></td></tr></tbody></table><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><p>navigator</p><h4 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a><a href="https://uniapp.dcloud.io/component/navigator?id=navigator">navigator</a></h4><p>页面链接。</p><p><strong>属性说明</strong></p><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th><th align="left">平台支持度</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">String</td><td align="left"></td><td align="left">应用内的跳转链接，值为相对路径或绝对路径，如：”..&#x2F;first&#x2F;first”，”&#x2F;pages&#x2F;first&#x2F;first”，注意不能加 <code>.vue</code> 后缀</td><td align="left"></td></tr><tr><td align="left">open-type</td><td align="left">String</td><td align="left">navigate</td><td align="left">跳转方式</td><td align="left"></td></tr><tr><td align="left">delta</td><td align="left">Number</td><td align="left"></td><td align="left">当 open-type 为 ‘navigateBack’ 时有效，表示回退的层数</td><td align="left"></td></tr><tr><td align="left">animation-type</td><td align="left">String</td><td align="left">pop-in&#x2F;out</td><td align="left">当 open-type 为 navigateTo、navigateBack 时有效，窗口的显示&#x2F;关闭动画效果，详见：<a href="https://uniapp.dcloud.io/api/router?id=animation">窗口动画</a></td><td align="left">5+App</td></tr><tr><td align="left">animation-duration</td><td align="left">Number</td><td align="left">300</td><td align="left">当 open-type 为 navigateTo、navigateBack 时有效，窗口显示&#x2F;关闭动画的持续时间。</td><td align="left">5+App</td></tr><tr><td align="left">hover-class</td><td align="left">String</td><td align="left">navigator-hover</td><td align="left">指定点击时的样式类，当hover-class&#x3D;”none”时，没有点击态效果</td><td align="left"></td></tr><tr><td align="left">hover-stop-propagation</td><td align="left">Boolean</td><td align="left">false</td><td align="left">指定是否阻止本节点的祖先节点出现点击态</td><td align="left">微信小程序</td></tr><tr><td align="left">hover-start-time</td><td align="left">Number</td><td align="left">50</td><td align="left">按住后多久出现点击态，单位毫秒</td><td align="left"></td></tr><tr><td align="left">hover-stay-time</td><td align="left">Number</td><td align="left">600</td><td align="left">手指松开后点击态保留时间，单位毫秒</td><td align="left"></td></tr></tbody></table><p><strong>open-type 有效值</strong></p><table><thead><tr><th align="left">值</th><th align="left">说明</th><th align="left">平台支持度</th></tr></thead><tbody><tr><td align="left">navigate</td><td align="left">对应 uni.navigateTo 的功能,</td><td align="left">保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</td></tr><tr><td align="left">redirect</td><td align="left">对应 uni.redirectTo 的功能</td><td align="left">关闭当前页面，跳转到应用内的某个页面。</td></tr><tr><td align="left">switchTab</td><td align="left">对应 uni.switchTab 的功能</td><td align="left">跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。</td></tr><tr><td align="left">reLaunch</td><td align="left">对应 uni.reLaunch 的功能</td><td align="left">关闭所有页面，打开到应用内的某个页面。</td></tr><tr><td align="left">navigateBack</td><td align="left">对应 uni.navigateBack 的功能</td><td align="left">关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">openView</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: path</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uni中还有用接口实现跳转的，类似于web开发中使用window.location.href<br>uni.navigateTo保留当前页面，跳转到应用内的某个页面，使用uni.navigateBack可以返回到原页面。<br>uni.redirectTo关闭当前页面，跳转到应用内的某个页面。<br>uni.reLaunch关闭所有页面，打开到应用内的某个页面。<br>uni.switchTab跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。<br>uni.navigateBack关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层。</p><p><strong>注：使用期间发现路由不能用下面导航栏的页面路径</strong></p><h2 id="网络："><a href="#网络：" class="headerlink" title="网络："></a>网络：</h2><h3 id="发起网络请求"><a href="#发起网络请求" class="headerlink" title="发起网络请求"></a>发起网络请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://jsonplaceholder.typicode.com/users&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,<span class="comment">// 必须大写</span></span><br><span class="line">    <span class="attr">data</span>:&#123; <span class="comment">// 请求参数</span></span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;<span class="comment">// 成功回调</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response&#x27;</span>, res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;<span class="comment">// 失败回调</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="uni-request-OBJECT"><a href="#uni-request-OBJECT" class="headerlink" title="uni.request(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/request/request?id=request">uni.request(OBJECT)</a></h4><p>发起网络请求。</p><blockquote><p>在各个小程序平台运行时，网络相关的 API 在使用前需要配置域名白名单。</p></blockquote><p><strong>OBJECT 参数说明</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">类型</th><th align="left">必填</th><th align="left">默认值</th><th align="left">说明</th><th align="left">平台支持度</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">String</td><td align="left">是</td><td align="left"></td><td align="left">开发者服务器接口地址</td><td align="left"></td></tr><tr><td align="left">data</td><td align="left">Object&#x2F;String&#x2F;ArrayBuffer</td><td align="left">否</td><td align="left"></td><td align="left">请求的参数</td><td align="left"></td></tr><tr><td align="left">header</td><td align="left">Object</td><td align="left">否</td><td align="left"></td><td align="left">设置请求的 header，header 中不能设置 Referer。</td><td align="left"></td></tr><tr><td align="left">method</td><td align="left">String</td><td align="left">否</td><td align="left">GET</td><td align="left">有效值详见下方说明</td><td align="left"></td></tr><tr><td align="left">dataType</td><td align="left">String</td><td align="left">否</td><td align="left">json</td><td align="left">如果设为 json，会尝试对返回的数据做一次 JSON.parse</td><td align="left"></td></tr><tr><td align="left">responseType</td><td align="left">String</td><td align="left">否</td><td align="left">text</td><td align="left">设置响应的数据类型。合法值：text、arraybuffer</td><td align="left">支付宝小程序不支持</td></tr><tr><td align="left">success</td><td align="left">Function</td><td align="left">否</td><td align="left"></td><td align="left">收到开发者服务成功返回的回调函数</td><td align="left"></td></tr><tr><td align="left">fail</td><td align="left">Function</td><td align="left">否</td><td align="left"></td><td align="left">接口调用失败的回调函数</td><td align="left"></td></tr><tr><td align="left">complete</td><td align="left">Function</td><td align="left">否</td><td align="left"></td><td align="left">接口调用结束的回调函数（调用成功、失败都会执行）</td><td align="left"></td></tr></tbody></table><p><strong>method 有效值</strong></p><p>必须大写，有效值在不同平台支持度不同。</p><table><thead><tr><th align="center">method</th><th align="center">5+App</th><th align="center">H5</th><th align="center">微信小程序</th><th align="center">支付宝小程序</th><th align="center">百度小程序</th><th align="center">头条小程序</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">POST</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">PUT</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">x</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">DELETE</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">x</td><td align="center">√</td><td align="center">x</td></tr><tr><td align="center">CONNECT</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">x</td><td align="center">x</td><td align="center">x</td></tr><tr><td align="center">HEAD</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">x</td><td align="center">√</td><td align="center">x</td></tr><tr><td align="center">OPTIONS</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">x</td><td align="center">√</td><td align="center">x</td></tr><tr><td align="center">TRACE</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">x</td><td align="center">x</td><td align="center">x</td></tr></tbody></table><p><strong>success 返回参数说明</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">Object&#x2F;String&#x2F;ArrayBuffer</td><td align="left">开发者服务器返回的数据</td></tr><tr><td align="left">statusCode</td><td align="left">Number</td><td align="left">开发者服务器返回的 HTTP 状态码</td></tr><tr><td align="left">header</td><td align="left">Object</td><td align="left">开发者服务器返回的 HTTP Response Header</td></tr></tbody></table><p><strong>data 数据说明</strong></p><p>最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String。转换规则如下：</p><ul><li>对于 <code>GET</code> 方法，会将数据转换为 query string。例如 <code>&#123; name: &#39;name&#39;, age: 18 &#125;</code> 转换后的结果是 <code>name=name&amp;age=18</code>。</li><li>对于 <code>POST</code> 方法且 <code>header[&#39;content-type&#39;]</code> 为 <code>application/json</code> 的数据，会进行 JSON 序列化。</li><li>对于 <code>POST</code> 方法且 <code>header[&#39;content-type&#39;]</code> 为 <code>application/x-www-form-urlencoded</code> 的数据，会将数据转换为 query string</li></ul><h3 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a>上传和下载</h3><h4 id="uni-uploadFile-object"><a href="#uni-uploadFile-object" class="headerlink" title="uni.uploadFile(object)"></a>uni.uploadFile(object)</h4><p>将本地资源上传到开发者服务器，客户端发起一个 <code>POST</code> 请求，其中 <code>content-type</code> 为 <code>multipart/form-data</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uni.<span class="title function_">chooseImage</span>(&#123;</span><br><span class="line">       <span class="attr">success</span>: <span class="function">(<span class="params">chooseImageRes</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> tempFilePaths = chooseImageRes.<span class="property">tempFilePaths</span>;</span><br><span class="line">           uni.<span class="title function_">uploadFile</span>(&#123;<span class="comment">// 三个必填</span></span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;https://www.example.com/upload&#x27;</span>, <span class="comment">//仅为示例，非真实的接口地址</span></span><br><span class="line">               <span class="attr">filePath</span>: tempFilePaths[<span class="number">0</span>], <span class="comment">// 必填 要上传的文件资源路径</span></span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>,<span class="comment">// 必填 文件对应的 key , 开发者在服务器端通过这个 key 可以获取到文件二进制内容</span></span><br><span class="line">               <span class="attr">formData</span>: &#123;</span><br><span class="line">                   <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">success</span>: <span class="function">(<span class="params">uploadFileRes</span>) =&gt;</span> &#123;</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(uploadFileRes.<span class="property">data</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h4 id="uni-downloadFile（object）"><a href="#uni-downloadFile（object）" class="headerlink" title="uni.downloadFile（object）"></a>uni.downloadFile（object）</h4><p>下载文件资源到本地，客户端直接发起一个 HTTP GET 请求，返回文件的本地临时路径。</p><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo搭建的个人博客</title>
      <link href="/2023/03/16/ji-yu-hexo-da-jian-de-ge-ren-bo-ke/"/>
      <url>/2023/03/16/ji-yu-hexo-da-jian-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="获得个人网站域名"><a href="#获得个人网站域名" class="headerlink" title="获得个人网站域名"></a>获得个人网站域名</h2><p>域名是上网单位和个人在网络上的重要标识，起着识别作用 ，便于他人识别和检索某一企业 、组织或个人的信息资源，从而更好地实现网络上的资源共享。但是对于个人来说，域名是一个申请只要一块钱，续用要缴纳年费的东西，所以这东西看个人需要。</p><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><h3 id="没有GitHub账户"><a href="#没有GitHub账户" class="headerlink" title="没有GitHub账户"></a>没有GitHub账户</h3><p>需要进入GitHub注册GitHub帐号，这边我使用的是QQ邮箱，注册过程可能略卡，莫慌</p><img src="https://i.postimg.cc/GpXL9Xck/image-20230317105814307.png" alt="image-20230317105814307" style="zoom:150%;" /><h3 id="有github账户"><a href="#有github账户" class="headerlink" title="有github账户"></a>有github账户</h3><p>点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.<a href="https://link.zhihu.com/?target=http://github.io">github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p><img src="https://i.postimg.cc/z3Y54Mj1/image-20230317110528212.png" alt="image-20230317110528212" style="zoom:120%;" /><p>错误示范：</p><img src="https://i.postimg.cc/D0XnjF1g/image-20230317110557153.png" alt="image-20230317110557153" style="zoom:120%;" /><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>如果以前安装且配置过，<strong>不需要重复配置</strong></p><p>Git是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理项目。网站在本地搭建好了，需要使用Git同步到GitHub上。从Git官网下载：<a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package</a> 选择64位的安装包，下载后安装，</p><img src="https://i.postimg.cc/bYDnctT6/image-20230317115833739.png" alt="image-20230317115833739" style="zoom: 150%;" /><p>在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。</p><img src="https://i.postimg.cc/Ls8qyY53/image-20230317120031483.png" alt="image-20230317120031483" style="zoom: 150%;" /><p>安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash。</p><img src="https://i.postimg.cc/RCkHMZpv/image-20230317120324417.png.png" alt="image-20230317120324417" style="zoom:150%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><img src="https://i.postimg.cc/qM2CgHWy/image-20230317120530945.png" alt="image-20230317120530945" style="zoom:120%;" /><p>如果找不到id_rsa.pub，返回查看你git打开的位置</p><p>点击setting</p><img src="https://i.postimg.cc/x1YNzFS7/image-20230317120848313.png" alt="image-20230317120848313" style="zoom:120%;" /><p>在右侧找到SSH and GPG keys</p><img src="https://i.postimg.cc/432Yjfhk/image-20230317121003223.png" alt="image-20230317121003223" style="zoom:120%;" /><p>点击new SSH key</p><img src="https://i.postimg.cc/Y94vH514/image-20230317121105203.png" alt="image-20230317121105203" /><p>标题任意，key打开id_rsa.pub文件，将内容复制进去</p><img src="https://i.postimg.cc/MHVXc13q/image-20230317121339995.png" alt="image-20230317121339995"  /><p>在Git Bash中检测GitHub公钥设置是否成功，输入 **ssh <a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a> **：</p><img src="https://i.postimg.cc/LXrn6xTx/image-20230317121646473.png" alt="image-20230317121646473" style="zoom:120%;"  /><p>这样连结就建好了，接下来要安装本地环境</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p><img src="https://i.postimg.cc/28dVrFBx/image-20230317121956816.png" alt="image-20230317121956816" style="zoom:120%;" /><p>如果有切换node版本需要可以看 如何使用nvm切换node版本</p><p>到这了，安装Hexo的环境已经全部搭建完成。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><a href="https://hexo.io/">https://hexo.io/</a> 想了解更详细可以阅读官网</p><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行“在此处打开powershell窗口”（有些版本是open command window here）</p><img src="https://i.postimg.cc/c4Grp56H/image-20230317122146912.png" alt="image-20230317122146912" style="zoom:120%;" /><p>使用npm命令安装Hexo，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p><p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:4000</span><br></pre></td></tr></table></figure><p>可以看出我们写出第一篇博客。</p><img src="https://i.postimg.cc/2yQ8jr35/image-20230317123216952.png" alt="image-20230317123216952" style="zoom:120%;" /><h3 id="常用的Hexo-命令"><a href="#常用的Hexo-命令" class="headerlink" title="常用的Hexo 命令"></a>常用的Hexo 命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br></pre></td></tr></table></figure><h3 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h2 id="推送到网站"><a href="#推送到网站" class="headerlink" title="推送到网站"></a>推送到网站</h2><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p><img src="https://i.postimg.cc/8Cc5R2Xy/image-20230317123447294.png" alt="image-20230317123447294" style="zoom:120%;" /><p>找到_config.yml底部：</p><img src="https://i.postimg.cc/t4X7TZ3G/image-20230317123750175.png" alt="image-20230317123750175" style="zoom:120%;" /><p>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class="line">branch: main（以前是branch）</span><br></pre></td></tr></table></figure><p>参考如下：</p><img src="https://i.postimg.cc/Qd0CW8m9/image-20230317124435260.png" alt="image-20230317124736206" style="zoom:120%;" /><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即<a href="https://link.zhihu.com/?target=http://xxxx.github.io">xxxx.github.io</a> 。</p><p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的<a href="https://link.zhihu.com/?target=http://xxxx.github.io">xxxx.github.io</a> 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析，然后添加解析，包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的<a href="https://link.zhihu.com/?target=http://xxxx.github.io">github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a> 这里千万别弄错了。</p><p>第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名，点击save保存。</p><p>第三步，进入本地博客文件夹 ，进入blog&#x2F;source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。</p><p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p><p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，我使用的是hexo-theme-matery主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成hexo-theme-matery主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery themes/hexo-theme-matery</span><br></pre></td></tr></table></figure><p>这是将hexo-theme-matery主题下载到blog目录的themes主题下的hexo-theme-matery文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为hexo-theme-matery</p><p>其他配置具体查看下载的主题的readme就行</p><h2 id="初识MarkDown语法"><a href="#初识MarkDown语法" class="headerlink" title="初识MarkDown语法"></a>初识MarkDown语法</h2><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：[Markdown 语法说明]可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐Typora ，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>我们开始正式发布上线博客文章，在命令行中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;博客名字&quot;</span></span><br></pre></td></tr></table></figure><p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Typora编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求。</p><p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d ，随后可以在浏览器中输入域名浏览。</p><h2 id="寻找图床"><a href="#寻找图床" class="headerlink" title="寻找图床"></a>寻找图床</h2><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法， <code>![图片信息](外部链接)  </code>完成图片的插入，这种网站就被成为图床。我经常使用的的图床有两个：Postimage和 SM.MS，具体的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细。</p><h2 id="提交出现错误"><a href="#提交出现错误" class="headerlink" title="提交出现错误"></a>提交出现错误</h2><p>解决方式一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##进入站点根目录cd D:/学习/vesnaBlog/vesnaBlog</span><br><span class="line">##删除git提交内容文件夹rm -rf .deploy_git/</span><br><span class="line">##执行git config --global core.autocrlf false</span><br><span class="line">##最后hexo clean </span><br><span class="line">&amp;&amp; hexo g </span><br><span class="line">&amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>解决方式二：有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##进入站点根目录cd D:/学习/vesnaBlog/vesnaBlog</span><br><span class="line">##删除git提交内容文件夹vim _config.yml</span><br><span class="line">##修改deploy:type: gitrepo: https://github.com/yourname/yourname.github.io.git -&gt; git@github.com:a956551943/github账户名.github.io.gitbranch: master</span><br><span class="line">##最后hexo clean</span><br><span class="line">&amp;hexo g</span><br><span class="line">&amp;hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
